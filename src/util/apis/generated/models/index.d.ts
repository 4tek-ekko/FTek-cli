/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */


/**
 * @class
 * Initializes a new instance of the Status class.
 * @constructor
 * @member {string} statusProperty
 * 
 */
export interface Status {
  statusProperty: string;
}

/**
 * @class
 * Initializes a new instance of the Failure class.
 * @constructor
 * @member {string} message
 * 
 */
export interface Failure {
  message: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorResponse class.
 * @constructor
 * @member {object} error
 * 
 * @member {string} [error.code] Possible values include: 'BadRequest',
 * 'Conflict', 'NotAcceptable', 'NotAuthorized', 'NotFound',
 * 'InternalServerError'
 * 
 * @member {string} [error.message]
 * 
 */
export interface ErrorResponse {
  error: ErrorDetails;
}

/**
 * @class
 * Initializes a new instance of the ErrorDetails class.
 * @constructor
 * @member {string} code Possible values include: 'BadRequest', 'Conflict',
 * 'NotAcceptable', 'NotAuthorized', 'NotFound', 'InternalServerError'
 * 
 * @member {string} message
 * 
 */
export interface ErrorDetails {
  code: string;
  message: string;
}

/**
 * @class
 * Initializes a new instance of the ApiTokensPostResponse class.
 * @constructor
 * @member {string} id The unique id (UUID) of the api token
 * 
 * @member {string} [apiToken] The api token generated will not be accessible
 * again(so please save in a safe location)
 * 
 * @member {string} [description] The description of the token
 * 
 * @member {string} createdAt The creation time
 * 
 */
export interface ApiTokensPostResponse {
  id: string;
  apiToken?: string;
  description?: string;
  createdAt: string;
}

/**
 * @class
 * Initializes a new instance of the ApiTokensPostRequest class.
 * @constructor
 * @member {string} [description] The description of the token
 * 
 */
export interface ApiTokensPostRequest {
  description?: string;
}

/**
 * @class
 * Initializes a new instance of the ApiTokenResponse class.
 * @constructor
 * @member {string} id The unique id (UUID) of the api token
 * 
 * @member {string} [description] The description of the token
 * 
 * @member {string} createdAt The creation time
 * 
 */
export interface ApiTokenResponse {
  id: string;
  description?: string;
  createdAt: string;
}

/**
 * @class
 * Initializes a new instance of the AppPatchRequest class.
 * @constructor
 * @member {string} [description] A short text describing the app
 * 
 * @member {string} [displayName] The display name of the app
 * 
 * @member {string} [name] The name of the app used in URLs
 * 
 */
export interface AppPatchRequest {
  description?: string;
  displayName?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the AppRequest class.
 * @constructor
 * @member {string} [description] A short text describing the app
 * 
 * @member {string} displayName The full name of the user. Might for example
 * be first and last name
 * 
 * @member {string} [language] The primary programming language used in the app
 * 
 * @member {string} [name] The name of the app used in URLs
 * 
 * @member {string} platform The platform of the app. Possible values include:
 * 'iOS', 'Android'
 * 
 */
export interface AppRequest {
  description?: string;
  displayName: string;
  language?: string;
  name?: string;
  platform: string;
}

/**
 * @class
 * Initializes a new instance of the UserUpdateRequest class.
 * @constructor
 * @member {string} [displayName] The full name of the user. Might for example
 * be first and last name
 * 
 */
export interface UserUpdateRequest {
  displayName?: string;
}

/**
 * @class
 * Initializes a new instance of the AppResponse class.
 * @constructor
 * @member {string} id The unique ID (UUID) of the app
 * 
 * @member {string} appSecret A unique and secret key used to identify the app
 * in communication with the ingestion endpoint for crash reporting and
 * analytics
 * 
 * @member {string} [description] The description of the app
 * 
 * @member {string} displayName The display name of the app
 * 
 * @member {string} name The name of the app used in URLs
 * 
 * @member {string} platform The platform of the app
 * 
 * @member {string} [language] The primary programming language used in the app
 * 
 * @member {string} [iconUrl] The string representation of the URL pointing to
 * the app's icon
 * 
 * @member {object} owner
 * 
 * @member {string} [owner.id] The unique id (UUID) of the owner
 * 
 * @member {string} [owner.avatarUrl] The avatar URL of the owner
 * 
 * @member {string} [owner.email] The owner's email address
 * 
 * @member {string} [owner.displayName] The owner's display name
 * 
 * @member {string} [owner.name] The unique name that used to identify the
 * owner
 * 
 * @member {string} [owner.type] The owner type. Can either be 'org' or
 * 'user'. Possible values include: 'org', 'user'
 * 
 */
export interface AppResponse {
  id: string;
  appSecret: string;
  description?: string;
  displayName: string;
  name: string;
  platform: string;
  language?: string;
  iconUrl?: string;
  owner: Owner;
}

/**
 * @class
 * Initializes a new instance of the Owner class.
 * @constructor
 * The information about the app's owner
 *
 * @member {string} id The unique id (UUID) of the owner
 * 
 * @member {string} [avatarUrl] The avatar URL of the owner
 * 
 * @member {string} email The owner's email address
 * 
 * @member {string} displayName The owner's display name
 * 
 * @member {string} name The unique name that used to identify the owner
 * 
 * @member {string} type The owner type. Can either be 'org' or 'user'.
 * Possible values include: 'org', 'user'
 * 
 */
export interface Owner {
  id: string;
  avatarUrl?: string;
  email: string;
  displayName: string;
  name: string;
  type: string;
}

/**
 * @class
 * Initializes a new instance of the UserProfileResponse class.
 * @constructor
 * @member {string} id The unique id (UUID) of the user
 * 
 * @member {string} email The email address of the user
 * 
 * @member {string} displayName The full name of the user. Might for example
 * be first and last name
 * 
 * @member {string} name The unique name that is used to identify the user.
 * 
 * @member {string} [avatarUrl] The avatar URL of the user
 * 
 * @member {boolean} [canChangePassword] User is required to send an old
 * password in order to change the password.
 * 
 */
export interface UserProfileResponse {
  id: string;
  email: string;
  displayName: string;
  name: string;
  avatarUrl?: string;
  canChangePassword?: boolean;
}

/**
 * @class
 * Initializes a new instance of the InvitationDetailResponse class.
 * @constructor
 * @member {string} id The unique ID (UUID) of the invitation
 * 
 * @member {string} email The email address of the invited user
 * 
 */
export interface InvitationDetailResponse {
  id: string;
  email: string;
}

/**
 * @class
 * Initializes a new instance of the SourceRepository class.
 * @constructor
 * The source repository
 *
 * @member {string} [name] The repository name
 * 
 */
export interface SourceRepository {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the WebSocketContainer class.
 * @constructor
 * A websocket reference
 *
 * @member {string} url WebSocket URL
 * 
 */
export interface WebSocketContainer {
  url: string;
}

/**
 * @class
 * Initializes a new instance of the Project class.
 * @constructor
 * A build project
 *
 * @member {string} name The project name
 * 
 * @member {string} path The path to the project
 * 
 */
export interface Project {
  name: string;
  path: string;
}

/**
 * @class
 * Initializes a new instance of the XcodeScheme class.
 * @constructor
 * @member {string} name Scheme name
 * 
 * @member {boolean} hasTestAction Does scheme have a test action?
 * 
 */
export interface XcodeScheme {
  name: string;
  hasTestAction: boolean;
}

/**
 * @class
 * Initializes a new instance of the XcodeSchemeContainer class.
 * @constructor
 * @member {string} path Path to project
 * 
 * @member {array} sharedSchemes Project schemes
 * 
 * @member {string} [podfilePath] Path to CococaPods file, if present
 * 
 */
export interface XcodeSchemeContainer {
  path: string;
  sharedSchemes: XcodeScheme[];
  podfilePath?: string;
}

/**
 * @class
 * Initializes a new instance of the XamarinSolution class.
 * @constructor
 * @member {string} path Path to solution
 * 
 * @member {array} configurations Solution configurations
 * 
 */
export interface XamarinSolution {
  path: string;
  configurations: string[];
}

/**
 * @class
 * Initializes a new instance of the AndroidProject class.
 * @constructor
 * @member {array} modules Gradle modules for the project
 * 
 * @member {string} [gradleWrapperPath]
 * 
 */
export interface AndroidProject {
  modules: AndroidModule[];
  gradleWrapperPath?: string;
}

/**
 * @class
 * Initializes a new instance of the AndroidModule class.
 * @constructor
 * @member {string} name Name of the Android module
 * 
 * @member {string} [path] Path to the module
 * 
 */
export interface AndroidModule {
  name: string;
  path?: string;
}

/**
 * @class
 * Initializes a new instance of the ToolsetProjects class.
 * @constructor
 * A collection of projects for each type of toolset
 *
 * @member {array} [xcode] Xcode projects, with their schemes
 * 
 * @member {array} [javascript] package.json filess
 * 
 * @member {array} [xamarin] Xamarin solutions
 * 
 * @member {object} [android]
 * 
 * @member {array} [android.modules] Gradle modules for the project
 * 
 * @member {string} [android.gradleWrapperPath]
 * 
 */
export interface ToolsetProjects {
  xcode?: XcodeSchemeContainer[];
  javascript?: string[];
  xamarin?: XamarinSolution[];
  android?: AndroidProject;
}

/**
 * @class
 * Initializes a new instance of the BranchStatus class.
 * @constructor
 * The branch build status
 *
 * @member {boolean} configured
 * 
 * @member {object} [lastBuild]
 * 
 * @member {number} [lastBuild.id] The build ID
 * 
 * @member {string} [lastBuild.buildNumber] The build number
 * 
 * @member {string} [lastBuild.queueTime] The time the build was queued
 * 
 * @member {string} [lastBuild.startTime] The time the build was started
 * 
 * @member {string} [lastBuild.finishTime] The time the build was finished
 * 
 * @member {string} [lastBuild.lastChangedDate] The time the build status was
 * last changed
 * 
 * @member {string} [lastBuild.status] The build status
 * 
 * @member {string} [lastBuild.result] The build result
 * 
 * @member {string} [lastBuild.sourceBranch] The source branch name
 * 
 * @member {string} [lastBuild.sourceVersion] The source SHA
 * 
 */
export interface BranchStatus {
  configured: boolean;
  lastBuild?: Build;
}

/**
 * @class
 * Initializes a new instance of the Build class.
 * @constructor
 * @member {number} id The build ID
 * 
 * @member {string} buildNumber The build number
 * 
 * @member {string} queueTime The time the build was queued
 * 
 * @member {string} [startTime] The time the build was started
 * 
 * @member {string} [finishTime] The time the build was finished
 * 
 * @member {string} [lastChangedDate] The time the build status was last
 * changed
 * 
 * @member {string} status The build status
 * 
 * @member {string} result The build result
 * 
 * @member {string} sourceBranch The source branch name
 * 
 * @member {string} sourceVersion The source SHA
 * 
 */
export interface Build {
  id: number;
  buildNumber: string;
  queueTime: string;
  startTime?: string;
  finishTime?: string;
  lastChangedDate?: string;
  status: string;
  result: string;
  sourceBranch: string;
  sourceVersion: string;
}

/**
 * @class
 * Initializes a new instance of the BranchProperties class.
 * @constructor
 * The branch build core properties
 *
 * @member {object} [branch]
 * 
 * @member {string} [branch.name] The branch name
 * 
 * @member {object} [branch.commit]
 * 
 * @member {string} [branch.commit.sha] The commit SHA
 * 
 * @member {string} [branch.commit.url] The URL to the commit
 * 
 * @member {boolean} [enabled]
 * 
 */
export interface BranchProperties {
  branch?: Branch;
  enabled?: boolean;
}

/**
 * @class
 * Initializes a new instance of the Branch class.
 * @constructor
 * @member {string} name The branch name
 * 
 * @member {object} commit
 * 
 * @member {string} [commit.sha] The commit SHA
 * 
 * @member {string} [commit.url] The URL to the commit
 * 
 */
export interface Branch {
  name: string;
  commit: Commit;
}

/**
 * @class
 * Initializes a new instance of the Commit class.
 * @constructor
 * @member {string} [sha] The commit SHA
 * 
 * @member {string} [url] The URL to the commit
 * 
 */
export interface Commit {
  sha?: string;
  url?: string;
}

/**
 * @class
 * Initializes a new instance of the BranchConfiguration class.
 * @constructor
 * The branch build configuration
 *
 * @member {number} id
 * 
 * @member {string} [trigger] Possible values include: 'continous', 'manual'
 * 
 * @member {boolean} [testsEnabled]
 * 
 * @member {boolean} [signed]
 * 
 * @member {object} [toolsets]
 * 
 * @member {object} [toolsets.xcode]
 * 
 * @member {string} [toolsets.xcode.projectOrWorkspacePath] Xcode
 * project/workspace path
 * 
 * @member {string} [toolsets.xcode.podfilePath] Path to CococaPods file, if
 * present
 * 
 * @member {string} [toolsets.xcode.provisioningProfileEncoded]
 * 
 * @member {string} [toolsets.xcode.certificateEncoded]
 * 
 * @member {string} [toolsets.xcode.certificatePassword]
 * 
 * @member {string} [toolsets.xcode.scheme]
 * 
 * @member {string} [toolsets.xcode.xcodeVersion]
 * 
 * @member {string} [toolsets.xcode.provisioningProfileFilename]
 * 
 * @member {string} [toolsets.xcode.certificateFilename]
 * 
 * @member {string} [toolsets.xcode.teamId]
 * 
 * @member {boolean} [toolsets.xcode.automaticSigning]
 * 
 * @member {object} [toolsets.javascript]
 * 
 * @member {string} [toolsets.javascript.packageJsonPath] Path to package.json
 * file for the main project, e.g. "package.json" or "myapp/package.json"
 * 
 * @member {object} [toolsets.xamarin]
 * 
 * @member {string} [toolsets.xamarin.slnPath]
 * 
 * @member {string} [toolsets.xamarin.isSimBuild]
 * 
 * @member {string} [toolsets.xamarin.args]
 * 
 * @member {string} [toolsets.xamarin.configuration]
 * 
 * @member {string} [toolsets.xamarin.p12File]
 * 
 * @member {string} [toolsets.xamarin.p12Pwd]
 * 
 * @member {string} [toolsets.xamarin.provProfile]
 * 
 * @member {object} [toolsets.android]
 * 
 * @member {string} [toolsets.android.gradleWrapperPath] Path to the Gradle
 * wrapper script
 * 
 * @member {string} [toolsets.android.gradleTasks] The Gradle tasks to perform
 * 
 * @member {string} [toolsets.android.module] The Gradle module to build
 * 
 * @member {string} [toolsets.android.variant] The Android build variant to
 * build
 * 
 */
export interface BranchConfiguration {
  id: number;
  trigger?: string;
  testsEnabled?: boolean;
  signed?: boolean;
  toolsets?: BranchConfigurationToolsets;
}

/**
 * @class
 * Initializes a new instance of the BranchConfigurationToolsets class.
 * @constructor
 * The branch build configuration for each toolset
 *
 * @member {object} [xcode]
 * 
 * @member {string} [xcode.projectOrWorkspacePath] Xcode project/workspace path
 * 
 * @member {string} [xcode.podfilePath] Path to CococaPods file, if present
 * 
 * @member {string} [xcode.provisioningProfileEncoded]
 * 
 * @member {string} [xcode.certificateEncoded]
 * 
 * @member {string} [xcode.certificatePassword]
 * 
 * @member {string} [xcode.scheme]
 * 
 * @member {string} [xcode.xcodeVersion]
 * 
 * @member {string} [xcode.provisioningProfileFilename]
 * 
 * @member {string} [xcode.certificateFilename]
 * 
 * @member {string} [xcode.teamId]
 * 
 * @member {boolean} [xcode.automaticSigning]
 * 
 * @member {object} [javascript]
 * 
 * @member {string} [javascript.packageJsonPath] Path to package.json file for
 * the main project, e.g. "package.json" or "myapp/package.json"
 * 
 * @member {object} [xamarin]
 * 
 * @member {string} [xamarin.slnPath]
 * 
 * @member {string} [xamarin.isSimBuild]
 * 
 * @member {string} [xamarin.args]
 * 
 * @member {string} [xamarin.configuration]
 * 
 * @member {string} [xamarin.p12File]
 * 
 * @member {string} [xamarin.p12Pwd]
 * 
 * @member {string} [xamarin.provProfile]
 * 
 * @member {object} [android]
 * 
 * @member {string} [android.gradleWrapperPath] Path to the Gradle wrapper
 * script
 * 
 * @member {string} [android.gradleTasks] The Gradle tasks to perform
 * 
 * @member {string} [android.module] The Gradle module to build
 * 
 * @member {string} [android.variant] The Android build variant to build
 * 
 */
export interface BranchConfigurationToolsets {
  xcode?: XcodeBranchConfigurationProperties;
  javascript?: JavaScriptBranchConfigurationProperties;
  xamarin?: XamarinBranchConfigurationProperties;
  android?: AndroidBranchConfigurationProperties;
}

/**
 * @class
 * Initializes a new instance of the XcodeBranchConfigurationProperties class.
 * @constructor
 * Build configuration when Xcode is part of the build steps
 *
 * @member {string} projectOrWorkspacePath Xcode project/workspace path
 * 
 * @member {string} [podfilePath] Path to CococaPods file, if present
 * 
 * @member {string} [provisioningProfileEncoded]
 * 
 * @member {string} [certificateEncoded]
 * 
 * @member {string} [certificatePassword]
 * 
 * @member {string} scheme
 * 
 * @member {string} xcodeVersion
 * 
 * @member {string} [provisioningProfileFilename]
 * 
 * @member {string} [certificateFilename]
 * 
 * @member {string} [teamId]
 * 
 * @member {boolean} [automaticSigning]
 * 
 */
export interface XcodeBranchConfigurationProperties {
  projectOrWorkspacePath: string;
  podfilePath?: string;
  provisioningProfileEncoded?: string;
  certificateEncoded?: string;
  certificatePassword?: string;
  scheme: string;
  xcodeVersion: string;
  provisioningProfileFilename?: string;
  certificateFilename?: string;
  teamId?: string;
  automaticSigning?: boolean;
}

/**
 * @class
 * Initializes a new instance of the JavaScriptBranchConfigurationProperties class.
 * @constructor
 * Build configuration when React Native, or other JavaScript tech, is part of
 * the build steps
 *
 * @member {string} packageJsonPath Path to package.json file for the main
 * project, e.g. "package.json" or "myapp/package.json"
 * 
 */
export interface JavaScriptBranchConfigurationProperties {
  packageJsonPath: string;
}

/**
 * @class
 * Initializes a new instance of the XamarinBranchConfigurationProperties class.
 * @constructor
 * Build configuration for Xamarin projects
 *
 * @member {string} slnPath
 * 
 * @member {string} isSimBuild
 * 
 * @member {string} args
 * 
 * @member {string} configuration
 * 
 * @member {string} p12File
 * 
 * @member {string} p12Pwd
 * 
 * @member {string} provProfile
 * 
 */
export interface XamarinBranchConfigurationProperties {
  slnPath: string;
  isSimBuild: string;
  args: string;
  configuration: string;
  p12File: string;
  p12Pwd: string;
  provProfile: string;
}

/**
 * @class
 * Initializes a new instance of the AndroidBranchConfigurationProperties class.
 * @constructor
 * Build configuration for Android projects
 *
 * @member {string} [gradleWrapperPath] Path to the Gradle wrapper script
 * 
 * @member {string} gradleTasks The Gradle tasks to perform
 * 
 * @member {string} [module] The Gradle module to build
 * 
 * @member {string} [variant] The Android build variant to build
 * 
 */
export interface AndroidBranchConfigurationProperties {
  gradleWrapperPath?: string;
  gradleTasks: string;
  module?: string;
  variant?: string;
}

/**
 * @class
 * Initializes a new instance of the RepoInfo class.
 * @constructor
 * @member {string} repoUrl The repository url
 * 
 */
export interface RepoInfo {
  repoUrl: string;
}

/**
 * @class
 * Initializes a new instance of the XcodeVersion class.
 * @constructor
 * The Xcode version
 *
 * @member {string} [name] The version name
 * 
 * @member {boolean} [current] If the version is current
 * 
 */
export interface XcodeVersion {
  name?: string;
  current?: boolean;
}

/**
 * @class
 * Initializes a new instance of the BuildPatch class.
 * @constructor
 * @member {string} [status] The build status
 * 
 */
export interface BuildPatch {
  status?: string;
}

/**
 * @class
 * Initializes a new instance of the SuccessResponse class.
 * @constructor
 * @member {string} message
 * 
 */
export interface SuccessResponse {
  message: string;
}

/**
 * @class
 * Initializes a new instance of the ValidationErrorResponse class.
 * @constructor
 * @member {string} id
 * 
 * @member {string} code
 * 
 * @member {string} message
 * 
 */
export interface ValidationErrorResponse {
  id: string;
  code: string;
  message: string;
}

/**
 * @class
 * Initializes a new instance of the PackageUploadBeginResponse class.
 * @constructor
 * A response containing information pertaining to starting a package upload
 * process
 *
 * @member {string} uploadId The ID for the current upload
 * 
 * @member {string} uploadUrl The URL where the client needs to upload the
 * package to
 * 
 */
export interface PackageUploadBeginResponse {
  uploadId: string;
  uploadUrl: string;
}

/**
 * @class
 * Initializes a new instance of the PackageUploadEndRequest class.
 * @constructor
 * A request containing information pertaining to completing a package upload
 * process
 *
 * @member {string} status The desired operation for the upload. Possible
 * values include: 'committed', 'aborted'
 * 
 */
export interface PackageUploadEndRequest {
  status: string;
}

/**
 * @class
 * Initializes a new instance of the PackageUploadEndResponse class.
 * @constructor
 * A response containing information about the uploaded package.
 *
 * @member {string} [packageUrl] A URL to the new package. If upload was
 * aborted will be null.
 * 
 */
export interface PackageUploadEndResponse {
  packageUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the PackageUpdateRequest class.
 * @constructor
 * A request containing information pertaining to distributing a package.
 *
 * @member {string} [status] The package state.<br>
 * <b>available</b>: The uploaded package has been distributed.<br>
 * <b>unavailable</b>: The uploaded package is not visible to the user. <br>
 * . Possible values include: 'available', 'unavailable'
 * 
 * @member {string} [releaseNotes] Release notes for this package.
 * 
 */
export interface PackageUpdateRequest {
  status?: string;
  releaseNotes?: string;
}

/**
 * @class
 * Initializes a new instance of the PackageDetails class.
 * @constructor
 * Details of an uploaded package
 *
 * @member {string} [packageId] ID identifying this unique package.
 * 
 * @member {string} [status] The package state.<br>
 * <b>available</b>: The uploaded package has been distributed.<br>
 * <b>unavailable</b>: The uploaded package is not visible to the user. <br>
 * . Possible values include: 'available', 'unavailable'
 * 
 * @member {string} [appName] The app's name (extracted from the uploaded
 * package).
 * 
 * @member {string} [version] The package's version.<br>
 * For iOS: CFBundleVersion from info.plist.
 * For Android: android:versionCode from AppManifest.xml.
 * 
 * @member {string} [shortVersion] The package's short version.<br>
 * For iOS: CFBundleShortVersionString from info.plist.
 * For Android: android:versionName from AppManifest.xml.
 * 
 * @member {string} [releaseNotes] The package's release notes.
 * 
 * @member {string} [provisioningProfileName] The package's release notes.
 * 
 * @member {number} [size] The package's size in bytes.
 * 
 * @member {string} [minOs] The package's minimum required operating system.
 * 
 * @member {string} [fingerprint] MD5 checksum of the package binary.
 * 
 * @member {string} [uploadedAt] UTC time in ISO 8601 format of the uploaded
 * time.
 * 
 * @member {string} [downloadUrl] The URL that hosts the binary for this
 * package.
 * 
 * @member {string} [appIconUrl] A URL to the app's icon.
 * 
 * @member {string} [installUrl] The href required to install a package on a
 * mobile device. On iOS devices will be prefixed with
 * `itms-services://?action=download-manifest&url=`
 * 
 */
export interface PackageDetails {
  packageId?: string;
  status?: string;
  appName?: string;
  version?: string;
  shortVersion?: string;
  releaseNotes?: string;
  provisioningProfileName?: string;
  size?: number;
  minOs?: string;
  fingerprint?: string;
  uploadedAt?: string;
  downloadUrl?: string;
  appIconUrl?: string;
  installUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the DeviceConfiguration class.
 * @constructor
 * @member {string} [name] The name of the device model and OS version
 * 
 * @member {uuid} [id] The unique id of the device configuration
 * 
 * @member {number} [tier] The tier
 * 
 * @member {string} [frame]
 * 
 * @member {object} [model]
 * 
 * @member {string} [model.name]
 * 
 * @member {string} [model.manufacturer]
 * 
 * @member {string} [model.model]
 * 
 * @member {string} [model.releaseDate]
 * 
 * @member {string} [model.platform]
 * 
 * @member {string} [os]
 * 
 * @member {string} [osName]
 * 
 * @member {number} [marketShare]
 * 
 */
export interface DeviceConfiguration {
  name?: string;
  id?: string;
  tier?: number;
  frame?: string;
  model?: DeviceModel;
  os?: string;
  osName?: string;
  marketShare?: number;
}

/**
 * @class
 * Initializes a new instance of the DeviceModel class.
 * @constructor
 * @member {string} [name]
 * 
 * @member {string} [manufacturer]
 * 
 * @member {string} [model]
 * 
 * @member {string} [releaseDate]
 * 
 * @member {string} [platform]
 * 
 */
export interface DeviceModel {
  name?: string;
  manufacturer?: string;
  model?: string;
  releaseDate?: string;
  platform?: string;
}

/**
 * @class
 * Initializes a new instance of the TestRun class.
 * @constructor
 * @summary Test Run
 *
 * Summary single test run on Xamarin Test Cloud
 *
 * @member {uuid} [id] The unique id of the test upload
 * 
 * @member {string} [date] The date and time the test was uploaded
 * 
 * @member {string} [appVersion] The compiled version of the app binary
 * 
 * @member {string} [testSeries] The name of the test series with which this
 * test upload is associated
 * 
 * @member {string} [platform] The device platform targeted by the test.
 * Possible values are 'ios' or 'android'
 * 
 * @member {string} [state] The current status of the test run, in relation to
 * the various phases
 * 
 * @member {string} [status] The passed/failed state
 * 
 * @member {string} [description] Human readable explanation of the current
 * test status
 * 
 * @member {object} [stats]
 * 
 * @member {number} [stats.devices] Number of devices running the test
 * 
 * @member {number} [stats.total] Number of tests in total
 * 
 * @member {number} [stats.passed] Number of passed tests
 * 
 * @member {number} [stats.failed] Number of failed tests
 * 
 * @member {number} [stats.peakMemory] The max amount of MB used during the
 * test run
 * 
 * @member {number} [stats.totalDeviceMinutes] The number of minutes of device
 * time the test has been runnign
 * 
 * @member {string} [testType] The name of the test framework used to run this
 * test
 * 
 */
export interface TestRun {
  id?: string;
  date?: string;
  appVersion?: string;
  testSeries?: string;
  platform?: string;
  state?: string;
  status?: string;
  description?: string;
  stats?: TestRunStatistics;
  testType?: string;
}

/**
 * @class
 * Initializes a new instance of the TestRunStatistics class.
 * @constructor
 * @summary Test Run Statistics
 *
 * Summary single test run on Xamarin Test Cloud
 *
 * @member {number} [devices] Number of devices running the test
 * 
 * @member {number} [total] Number of tests in total
 * 
 * @member {number} [passed] Number of passed tests
 * 
 * @member {number} [failed] Number of failed tests
 * 
 * @member {number} [peakMemory] The max amount of MB used during the test run
 * 
 * @member {number} [totalDeviceMinutes] The number of minutes of device time
 * the test has been runnign
 * 
 */
export interface TestRunStatistics {
  devices?: number;
  total?: number;
  passed?: number;
  failed?: number;
  peakMemory?: number;
  totalDeviceMinutes?: number;
}

/**
 * @class
 * Initializes a new instance of the TestSeries class.
 * @constructor
 * @summary TestSeries
 *
 * Summary of a single test series
 *
 * @member {string} slug Unique, human-readable identifier of the test series
 * 
 * @member {string} name Name of the test series
 * 
 * @member {string} [mostRecentActivity] Date of the latest test run that used
 * this test series
 * 
 * @member {array} [testRuns] Most recent test runs
 * 
 */
export interface TestSeries {
  slug: string;
  name: string;
  mostRecentActivity?: string;
  testRuns?: TestRunSummary[];
}

/**
 * @class
 * Initializes a new instance of the TestRunSummary class.
 * @constructor
 * @summary TestRunSummary
 *
 * Most important information about a test run.
 *
 * @member {string} [date] Date of the test run.
 * 
 * @member {string} [statusDescription] Human-readable status of the test run.
 * 
 * @member {number} [failed] Number of failed tests
 * 
 * @member {number} [passed] Number of passed tests
 * 
 * @member {boolean} [completed] Tells whether the test run has completed
 * 
 */
export interface TestRunSummary {
  date?: string;
  statusDescription?: string;
  failed?: number;
  passed?: number;
  completed?: boolean;
}

/**
 * @class
 * Initializes a new instance of the TestCloudErrorDetails class.
 * @constructor
 * @summary TestCloudErrorDetails
 *
 * Details of a failed operation
 *
 * @member {string} status Status of the operation
 * 
 * @member {string} message Human-readable message that describes the error
 * 
 */
export interface TestCloudErrorDetails {
  status: string;
  message: string;
}

/**
 * @class
 * Initializes a new instance of the TestCloudFileHash class.
 * @constructor
 * @summary TestCloudFileHash
 *
 * Hash, type, path and byte range of a file that is required in test run
 *
 * @member {string} fileType Type of the file. Possible values include:
 * 'dsym-file', 'app-file', 'test-file'
 * 
 * @member {string} checksum SHA256 hash of the file
 * 
 * @member {string} relativePath Relative path of the file
 * 
 * @member {string} [byteRange] Range of bytes required to verify ownership of
 * the file
 * 
 */
export interface TestCloudFileHash {
  fileType: string;
  checksum: string;
  relativePath: string;
  byteRange?: string;
}

/**
 * @class
 * Initializes a new instance of the TestCloudStartTestRunOptions class.
 * @constructor
 * @summary TestCloudStartTestRunOptions
 *
 * Options required to start the test run
 *
 * @member {string} testFramework Test framework used by tests.
 * 
 * @member {string} deviceSelection Device selection string.
 * 
 * @member {string} [locale] Locale that should be used to run tests.
 * 
 * @member {string} [testSeries] Name of the test series.
 * 
 * @member {object} [testParameters] A JSON dictionary with additional test
 * parameters
 * 
 */
export interface TestCloudStartTestRunOptions {
  testFramework: string;
  deviceSelection: string;
  locale?: string;
  testSeries?: string;
  testParameters?: any;
}

/**
 * @class
 * Initializes a new instance of the TestCloudStartTestRunResult class.
 * @constructor
 * @summary TestCloudStartTestRunResult
 *
 * Result of starting a test run
 *
 * @member {array} [acceptedDevices] List with names of accepted devices
 * 
 * @member {array} [rejectedDevices] List with names and descriptions of
 * rejected devices
 * 
 */
export interface TestCloudStartTestRunResult {
  acceptedDevices?: string[];
  rejectedDevices?: string[];
}
