/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Account
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Account {

    /**
     * Accepts all pending invitations to distribution groups for the specified
     * user
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    acceptGroupsInvitation(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    acceptGroupsInvitation(callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Rejects a pending invitation for the specified user
     *
     * @param {string} invitationToken The app invitation token that was sent to
     * the user
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    rejectInvitation(invitationToken: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    rejectInvitation(invitationToken: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Accepts a pending invitation for the specified user
     *
     * @param {string} invitationToken The app invitation token that was sent to
     * the user
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    acceptInvitation(invitationToken: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    acceptInvitation(invitationToken: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Returns the user profile data
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getUserProfile(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getUserProfile(callback: ServiceCallback<any>): void;

    /**
     * Updates the user profile and returns the updated user data
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.displayName] The full name of the user. Might for
     * example be first and last name
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateUserProfile(options: { displayName? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updateUserProfile(callback: ServiceCallback<any>): void;

    /**
     * Removes the user from the app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} userEmail The email of the user to invite
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAppUser(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteAppUser(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Returns the users associated with the app specified with the given app name
     * which belongs to the given owner.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAppUsers(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getAppUsers(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns the testers associated with the app specified with the given app
     * name which belongs to the given owner.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAppTesters(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getAppTesters(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Update pending invitation permission
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} userEmail The email of the user to invite
     * 
     * @param {array} permissions The permissions the user has for the app in the
     * invitation
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateAppUserInvitationsPermission(ownerName: string, appName: string, userEmail: string, permissions: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    updateAppUserInvitationsPermission(ownerName: string, appName: string, userEmail: string, permissions: string[], callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Removes a user's invitation to an app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} userEmail The email of the user to invite
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAppInvitation(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteAppInvitation(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Invites a new or existing user to an app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} userEmail The user's email address'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    inviteAppUser(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    inviteAppUser(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Gets the pending invitations for the app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAppInvitations(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getAppInvitations(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns a list of member details in the distribution group specified
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} distributionGroupName The name of the distribution group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.excludePendingInvitations] Whether to exclude
     * pending invitations in the response
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDistributionGroupUsers(ownerName: string, appName: string, distributionGroupName: string, options: { excludePendingInvitations? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getDistributionGroupUsers(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<any>): void;

    /**
     * Adds the members to the specified distribution group
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} distributionGroupName The name of the distribution group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {array} [options.userEmails] The list of emails of the users
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createDistributionGroupUsers(ownerName: string, appName: string, distributionGroupName: string, options: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createDistributionGroupUsers(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<any>): void;

    /**
     * Remove the users from the distribution group
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} distributionGroupName The name of the distribution group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {array} [options.userEmails] The list of emails of the users
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteDistributionGroupUsers(ownerName: string, appName: string, distributionGroupName: string, options: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteDistributionGroupUsers(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns a single distribution group for a given distribution group name
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} distributionGroupName The name of the distribution group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDistributionGroup(ownerName: string, appName: string, distributionGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getDistributionGroup(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<any>): void;

    /**
     * Updates the attributes of distribution group
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} distributionGroupName The name of the distribution group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.name] The name of the distribution group
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateDistributionGroup(ownerName: string, appName: string, distributionGroupName: string, options: { name? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updateDistributionGroup(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<any>): void;

    /**
     * Deletes a distribution group
     *
     * @param {string} appName The name of the application
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} distributionGroupName The name of the distribution group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteDistributionGroup(appName: string, ownerName: string, distributionGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteDistributionGroup(appName: string, ownerName: string, distributionGroupName: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Returns a list of distribution groups in the app specified
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDistributionGroups(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getDistributionGroups(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Creates a new distribution group and returns it to the caller
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} name The name of the distribution group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createDistributionGroup(ownerName: string, appName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createDistributionGroup(ownerName: string, appName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * Return a specific app with the given app name which belongs to the given
     * owner.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getApp(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getApp(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Partially updates a single app
     *
     * @param {string} appName The name of the application
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.description] A short text describing the app
     * 
     * @param {string} [options.displayName] The display name of the app
     * 
     * @param {string} [options.name] The name of the app used in URLs
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateApp(appName: string, ownerName: string, options: { description? : string, displayName? : string, name? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updateApp(appName: string, ownerName: string, callback: ServiceCallback<any>): void;

    /**
     * Delete an app
     *
     * @param {string} appName The name of the application
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteApp(appName: string, ownerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteApp(appName: string, ownerName: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Creates a new app and returns it to the caller
     *
     * @param {object} app The data for the app
     * 
     * @param {string} [app.description] A short text describing the app
     * 
     * @param {string} app.displayName The descriptive name of the app. This can
     * contain any characters
     * 
     * @param {string} [app.name] The name of the app used in URLs
     * 
     * @param {string} app.os The OS the app will be running on. Possible values
     * include: 'iOS', 'Android', 'Windows'
     * 
     * @param {string} app.platform The platform of the app. Possible values
     * include: 'Java', 'Objective-C-Swift', 'React-Native', 'UWP', 'Xamarin'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createApp(app: models.App, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createApp(app: models.App, callback: ServiceCallback<any>): void;

    /**
     * Returns a list of apps
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getMemberApps(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getMemberApps(callback: ServiceCallback<any>): void;

    /**
     * Delete the api_token object with the specific id
     *
     * @param {string} apiTokenId The unique ID (UUID) of the api token
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteApiToken(apiTokenId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteApiToken(apiTokenId: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Returns api tokens for the authenticated user
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getApiTokens(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getApiTokens(callback: ServiceCallback<any>): void;

    /**
     * Creates a new API token
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.description] The description of the token
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createApiToken(options: { description? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createApiToken(callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Distribute
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Distribute {

    /**
     * Get a release with id `release_id`. if `release_id` is `latest`, return the
     * latest release that was distributed to the current user (from all the
     * distribution groups).
     *
     * @param {string} appSecret The secret of the target application
     * 
     * @param {string} releaseId The ID of the release, or `latest` to get the
     * latest release from all the distribution groups assigned to the current
     * user.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getReleaseOrLatestReleaseBySecret(appSecret: string, releaseId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getReleaseOrLatestReleaseBySecret(appSecret: string, releaseId: string, callback: ServiceCallback<any>): void;

    /**
     * Get a release with id `release_id`. if `release_id` is `latest`, return the
     * latest release that was distributed to the current user (from all the
     * distribution groups).
     *
     * @param {string} releaseId The ID of the release, or `latest` to get the
     * latest release from all the distribution groups assigned to the current
     * user.
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRelease(releaseId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getRelease(releaseId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Updates a release.
     *
     * @param {number} releaseId The ID of the release
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.distributionGroupName] Name of a distribution
     * group. The release will be associated with this distribution group. If the
     * distribution group doesn't exist a 400 is returned. If both distribution
     * group name and id are passed, the id is taking precedence.
     * 
     * @param {string} [options.distributionGroupId] Id of a distribution group.
     * The release will be associated with this distribution group. If the
     * distribution group doesn't exist a 400 is returned. If both distribution
     * group name and id are passed, the id is taking precedence.
     * 
     * @param {string} [options.releaseNotes] Release notes for this release.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateRelease(releaseId: number, ownerName: string, appName: string, options: { distributionGroupName? : string, distributionGroupId? : string, releaseNotes? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updateRelease(releaseId: number, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Deletes a release.
     *
     * @param {string} releaseId The ID of the release
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteRelease(releaseId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorDetails>): void;
    deleteRelease(releaseId: string, ownerName: string, appName: string, callback: ServiceCallback<models.ErrorDetails>): void;

    /**
     * Return detailed information about releases.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.publishedOnly] when true, filters out releases
     * that were uplaoded but were never distributed. Releases that under deleted
     * distribution groups will not be filtered out.
     * 
     * @param {string} [options.filter] OBSOLETE. Will be removed in next version.
     * An OData style filter. Currently only support the 'eq' comparision type.
     * E.g. ?$filter=status eq 'Available'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getReleases(ownerName: string, appName: string, options: { publishedOnly? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReleaseDetails[]>): void;
    getReleases(ownerName: string, appName: string, callback: ServiceCallback<models.ReleaseDetails[]>): void;

    /**
     * Commits or aborts the upload process for a release for the specified
     * application
     *
     * @param {string} uploadId The ID of the upload
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} status The desired operation for the upload. Possible
     * values include: 'committed', 'aborted'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateReleaseUpload(uploadId: string, ownerName: string, appName: string, status: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReleaseUploadEndResponse>): void;
    updateReleaseUpload(uploadId: string, ownerName: string, appName: string, status: string, callback: ServiceCallback<models.ReleaseUploadEndResponse>): void;

    /**
     * Begins the upload process for a new release for the specified application.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createReleaseUpload(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReleaseUploadBeginResponse>): void;
    createReleaseUpload(ownerName: string, appName: string, callback: ServiceCallback<models.ReleaseUploadBeginResponse>): void;

    /**
     * Get the latest release from every distribution group associated with an
     * application.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLatestReleases(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BasicReleaseDetails[]>): void;
    getLatestReleases(ownerName: string, appName: string, callback: ServiceCallback<models.BasicReleaseDetails[]>): void;

    /**
     * Return detailed information about a distributed release in a given
     * distribution group.
     *
     * @param {string} distributionGroupName The name of the distribution group.
     * 
     * @param {string} releaseId Must be `latest`, a specific `release_id` is not
     * supported at this time.
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLatestReleaseForDistributionGroup(distributionGroupName: string, releaseId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getLatestReleaseForDistributionGroup(distributionGroupName: string, releaseId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Deletes a release with id 'release_id' in a given distribution group.
     *
     * @param {string} distributionGroupName The name of the distribution group.
     * 
     * @param {string} releaseId The ID identifying the unique release.
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteReleaseForDistributionGroup(distributionGroupName: string, releaseId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteReleaseForDistributionGroup(distributionGroupName: string, releaseId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Return detailed information about distributed releases in a given
     * distribution group.
     *
     * @param {string} distributionGroupName The name of the distribution group.
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getReleasesForDistributionGroup(distributionGroupName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getReleasesForDistributionGroup(distributionGroupName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * CrashOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface CrashOperations {

    /**
     * Gets the json of a specific crash
     *
     * @param {string} crashId id of a specific error
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCrashRaw(crashId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getCrashRaw(crashId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Gets a list of application versions
     *
     * Gets a list of application versions
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAppVersions(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppVersion[]>): void;
    getAppVersions(ownerName: string, appName: string, callback: ServiceCallback<models.AppVersion[]>): void;

    /**
     * Marks a symbol by id (uuid) as ignored
     *
     * @param {string} symbolId The ID of the symbol (uuid of the symbol)
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postIgnoreSymbol(symbolId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postIgnoreSymbol(symbolId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns a particular symbol by id (uuid) for the provided application
     *
     * @param {string} symbolId The ID of the symbol (uuid of the symbol)
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSymbol(symbolId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSymbol(symbolId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns the list of all symbols for the provided application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSymbols(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSymbols(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Gets a symbol upload by id for the specified application
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSymbolUpload(symbolUploadId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSymbolUpload(symbolUploadId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Commits or aborts the symbol upload process for a new set of symbols for
     * the specified application
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} status The desired operation for the symbol upload.
     * Possible values include: 'committed', 'aborted'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    patchSymbolUpload(symbolUploadId: string, ownerName: string, appName: string, status: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    patchSymbolUpload(symbolUploadId: string, ownerName: string, appName: string, status: string, callback: ServiceCallback<any>): void;

    /**
     * Deletes a symbol upload by id for the specified application
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSymbolUpload(symbolUploadId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSymbolUpload(symbolUploadId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Gets a list of all uploads for the specified application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSymbolUploads(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSymbolUploads(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Begins the symbol upload process for a new set of symbols for the specified
     * application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.clientCallback] The callback URL that the client
     * can optionally provide to get status updates for the current symbol upload
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postSymbolUpload(ownerName: string, appName: string, options: { clientCallback? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postSymbolUpload(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Gets missing symbol crash group by its id
     *
     * Gets missing symbol crash group by its id
     *
     * @param {string} symbolGroupId missing symbol crash group id
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getMissingSymbolCrashGroupById(symbolGroupId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MissingSymbolCrashGroupsResponse>): void;
    getMissingSymbolCrashGroupById(symbolGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.MissingSymbolCrashGroupsResponse>): void;

    /**
     * @summary Gets top N (ordered by crash count) of crash groups by missing
     * symbol
     *
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     *
     * @param {number} top top N elements
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] query filter
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTopNFilteredMissingSymbolCrashGroups(top: number, ownerName: string, appName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MissingSymbolCrashGroupsResponse>): void;
    getTopNFilteredMissingSymbolCrashGroups(top: number, ownerName: string, appName: string, callback: ServiceCallback<models.MissingSymbolCrashGroupsResponse>): void;

    /**
     * Gets a stacktrace for a specific error
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getGroupStacktrace(crashGroupId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Stacktrace>): void;
    getGroupStacktrace(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Stacktrace>): void;

    /**
     * Gets a stacktrace for a specific error
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} crashId id of a specific error
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getErrorStacktrace(crashGroupId: string, crashId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Stacktrace>): void;
    getErrorStacktrace(crashGroupId: string, crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Stacktrace>): void;

    /**
     * Gets a specific error for an app
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} crashId id of a specific error
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.includeReport] true if the error should include
     * the raw error report. Default is false
     * 
     * @param {boolean} [options.includeLog] true if the error should include the
     * custom log report. Default is false
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCrash(crashGroupId: string, crashId: string, ownerName: string, appName: string, options: { includeReport? : boolean, includeLog? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Crash>): void;
    getCrash(crashGroupId: string, crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Crash>): void;

    /**
     * Gets all crashes of the app
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.includeReport] true if the error should include
     * the raw error report. Default is false
     * 
     * @param {boolean} [options.includeLog] true if the error should include the
     * custom log report. Default is false
     * 
     * @param {date} [options.dateFrom]
     * 
     * @param {date} [options.dateTo]
     * 
     * @param {string} [options.appVersion] version
     * 
     * @param {string} [options.errorType] Possible values include: 'something',
     * 'else'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCrashes(crashGroupId: string, ownerName: string, appName: string, options: { includeReport? : boolean, includeLog? : boolean, dateFrom? : Date, dateTo? : Date, appVersion? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Crash[]>): void;
    getCrashes(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Crash[]>): void;

    /**
     * Gets a specific group
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCrashGroup(crashGroupId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroup>): void;
    getCrashGroup(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroup>): void;

    /**
     * Updates a group
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.status]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    patchCrashGroup(crashGroupId: string, ownerName: string, appName: string, options: { status? : any, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroup>): void;
    patchCrashGroup(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroup>): void;

    /**
     * @summary Gets a list of crashes
     *
     * Gets a list of crashes
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.lastOccurrenceFrom] Earliest date when the last time
     * a crash occured in a error group
     * 
     * @param {date} [options.lastOccurrenceTo] Latest date when the last time a
     * crash occured in a error group
     * 
     * @param {string} [options.appVersion] version
     * 
     * @param {string} [options.groupType] Possible values include: 'GroupType1',
     * 'GroupType2'
     * 
     * @param {string} [options.groupStatus] Possible values include: 'open',
     * 'closed', 'ignored'
     * 
     * @param {string} [options.groupTextSearch] A freetext search that matches in
     * error, error types, error stack_traces and error user
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCrashGroups(ownerName: string, appName: string, options: { lastOccurrenceFrom? : Date, lastOccurrenceTo? : Date, appVersion? : string, groupType? : string, groupStatus? : string, groupTextSearch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroup[]>): void;
    getCrashGroups(ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroup[]>): void;

    /**
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCrashGroupCounts(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroupCounts>): void;
    getCrashGroupCounts(ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroupCounts>): void;
}

/**
 * @class
 * BuildOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface BuildOperations {

    /**
     * Gets the Xcode versions available to this app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getXcodeVersions(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getXcodeVersions(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Gets the repositories available from the source code host
     *
     * @param {string} sourceHost The source host. Possible values include:
     * 'github', 'bitbucket'
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.form] The selected form of the object. Possible
     * values include: 'lite', 'full'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRepositories(sourceHost: string, ownerName: string, appName: string, options: { form? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getRepositories(sourceHost: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns the repository build configuration status of the app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.includeInactive] Include inactive configurations
     * if none are active
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRepositoryConfiguration(ownerName: string, appName: string, options: { includeInactive? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getRepositoryConfiguration(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Configures the repository for build
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} repoUrl The repository url
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createRepositoryConfiguration(ownerName: string, appName: string, repoUrl: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createRepositoryConfiguration(ownerName: string, appName: string, repoUrl: string, callback: ServiceCallback<any>): void;

    /**
     * Removes the configuration for the respository
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteRepositoryConfiguration(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteRepositoryConfiguration(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns commit information for a batch of shas
     *
     * @param {string} shaCollection A collection of commit SHAs comma-delimited
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.form] The selected form of the object. Possible
     * values include: 'lite', 'full'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCommits(shaCollection: string, ownerName: string, appName: string, options: { form? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Branch[]>): void;
    getCommits(shaCollection: string, ownerName: string, appName: string, callback: ServiceCallback<models.Branch[]>): void;

    /**
     * Get the build log
     *
     * @param {number} buildId The build ID
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBuildLogs(buildId: number, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildLog>): void;
    getBuildLogs(buildId: number, ownerName: string, appName: string, callback: ServiceCallback<models.BuildLog>): void;

    /**
     * Gets the download URI
     *
     * @param {number} buildId The build ID
     * 
     * @param {string} downloadType The download type. Possible values include:
     * 'build', 'symbols', 'logs'
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBuildDownload(buildId: number, downloadType: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DownloadContainer>): void;
    getBuildDownload(buildId: number, downloadType: string, ownerName: string, appName: string, callback: ServiceCallback<models.DownloadContainer>): void;

    /**
     * Distribute a build
     *
     * @param {number} buildId The build ID
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} distributionGroupId The distribution group ID
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.releaseNotes] The release notes
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postDistributeRequest(buildId: number, ownerName: string, appName: string, distributionGroupId: string, options: { releaseNotes? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DistributionResponse>): void;
    postDistributeRequest(buildId: number, ownerName: string, appName: string, distributionGroupId: string, callback: ServiceCallback<models.DistributionResponse>): void;

    /**
     * Returns the build detail for the given build ID
     *
     * @param {number} buildId The build ID
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBuild(buildId: number, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build>): void;
    getBuild(buildId: number, ownerName: string, appName: string, callback: ServiceCallback<models.Build>): void;

    /**
     * Cancels a build
     *
     * @param {number} buildId The build ID
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.status] The build status; used to cancel builds.
     * Possible values include: 'cancelling'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateBuildStatus(buildId: number, ownerName: string, appName: string, options: { status? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build>): void;
    updateBuildStatus(buildId: number, ownerName: string, appName: string, callback: ServiceCallback<models.Build>): void;

    /**
     * Returns the projects in the repository for the branch, for all toolsets
     *
     * @param {string} branch The branch name
     * 
     * @param {string} os The desired OS for the project scan; normally the same
     * as the app OS. Possible values include: 'iOS', 'Android'
     * 
     * @param {string} platform The desired platform for the project scan.
     * Possible values include: 'Objective-C-Swift', 'React-Native', 'Xamarin',
     * 'Java'
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getProjectInformation(branch: string, os: string, platform: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ToolsetProjects>): void;
    getProjectInformation(branch: string, os: string, platform: string, ownerName: string, appName: string, callback: ServiceCallback<models.ToolsetProjects>): void;

    /**
     * Gets the branch configuration
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBranchConfiguration(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getBranchConfiguration(branch: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Configures the branch for build
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createBranchConfiguration(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BranchConfiguration>): void;
    createBranchConfiguration(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.BranchConfiguration>): void;

    /**
     * Reconfigures the branch for build
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateBranchConfiguration(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BranchConfiguration>): void;
    updateBranchConfiguration(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.BranchConfiguration>): void;

    /**
     * Deletes the branch build configuration
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteBranchConfiguration(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SuccessResponse>): void;
    deleteBranchConfiguration(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.SuccessResponse>): void;

    /**
     * Returns the list of builds for the branch
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBranchBuilds(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build[]>): void;
    getBranchBuilds(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.Build[]>): void;

    /**
     * Create a build
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.sourceVersion] Version to build
     * 
     * @param {boolean} [options.debug] Run build in debug mode
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    queueBuild(branch: string, ownerName: string, appName: string, options: { sourceVersion? : string, debug? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build[]>): void;
    queueBuild(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.Build[]>): void;

    /**
     * Returns the list of Git branches for this application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBranches(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getBranches(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Test
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Test {

    /**
     * Returns list of all test runs for a given test series
     *
     * @param {string} testSeriesSlug The slug of the test series
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllTestRunsForSeries(testSeriesSlug: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestRun[]>): void;
    getAllTestRunsForSeries(testSeriesSlug: string, ownerName: string, appName: string, callback: ServiceCallback<models.TestRun[]>): void;

    /**
     * Deletes a single test series
     *
     * @param {string} testSeriesSlug The slug of the test series
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteTestSeries(testSeriesSlug: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteTestSeries(testSeriesSlug: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Updates name and slug of a test series
     *
     * @param {string} testSeriesSlug The slug of the test series
     * 
     * @param {string} name New name of the new test series
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    patchTestSeries(testSeriesSlug: string, name: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestSeries>): void;
    patchTestSeries(testSeriesSlug: string, name: string, ownerName: string, appName: string, callback: ServiceCallback<models.TestSeries>): void;

    /**
     * Returns list of all test series for an application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllTestSeries(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestSeries[]>): void;
    getAllTestSeries(ownerName: string, appName: string, callback: ServiceCallback<models.TestSeries[]>): void;

    /**
     * Creates new test series for an application
     *
     * @param {string} name Name of the new test series
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createTestSeries(name: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createTestSeries(name: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Gets state of the test run
     *
     * @param {string} testRunId The ID of the test run
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTestRunState(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestRunState>): void;
    getTestRunState(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<models.TestRunState>): void;

    /**
     * Starts test run
     *
     * @param {string} testRunId The ID of the test run
     * 
     * @param {object} startOptions Option required to start the test run
     * 
     * @param {string} startOptions.testFramework Test framework used by tests.
     * 
     * @param {string} startOptions.deviceSelection Device selection string.
     * 
     * @param {string} [startOptions.language] Language that should be used to run
     * tests.
     * 
     * @param {string} [startOptions.locale] Locale that should be used to run
     * tests.
     * 
     * @param {string} [startOptions.testSeries] Name of the test series.
     * 
     * @param {object} [startOptions.testParameters] A JSON dictionary with
     * additional test parameters
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    startTestRun(testRunId: string, startOptions: models.TestCloudStartTestRunOptions, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestCloudStartTestRunResult>): void;
    startTestRun(testRunId: string, startOptions: models.TestCloudStartTestRunOptions, ownerName: string, appName: string, callback: ServiceCallback<models.TestCloudStartTestRunResult>): void;

    /**
     * Returns a single test report
     *
     * @param {uuid} testRunId The ID of the test run
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTestReport(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestReport>): void;
    getTestReport(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<models.TestReport>): void;

    /**
     * Adds file with the given hash to a test run
     *
     * @param {string} testRunId The ID of the test run
     * 
     * @param {array} fileInfo File hash information
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    uploadHashesBatch(testRunId: string, fileInfo: models.TestCloudFileHash[], ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestCloudFileHashResponse[]>): void;
    uploadHashesBatch(testRunId: string, fileInfo: models.TestCloudFileHash[], ownerName: string, appName: string, callback: ServiceCallback<models.TestCloudFileHashResponse[]>): void;

    /**
     * Adds file with the given hash to a test run
     *
     * @param {string} testRunId The ID of the test run
     * 
     * @param {object} fileInfo File hash information
     * 
     * @param {string} fileInfo.fileType Type of the file. Possible values
     * include: 'dsym-file', 'app-file', 'test-file'
     * 
     * @param {string} fileInfo.checksum SHA256 hash of the file
     * 
     * @param {string} fileInfo.relativePath Relative path of the file
     * 
     * @param {string} [fileInfo.byteRange] Range of bytes required to verify
     * ownership of the file
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    uploadHash(testRunId: string, fileInfo: models.TestCloudFileHashDeprecated, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    uploadHash(testRunId: string, fileInfo: models.TestCloudFileHashDeprecated, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Uploads file for a test run
     *
     * @param {string} testRunId The ID of the test run
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    startUploadingFile(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    startUploadingFile(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns a single test runs
     *
     * @param {uuid} testRunId The ID of the test run
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTestRun(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestRun>): void;
    getTestRun(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<models.TestRun>): void;

    /**
     * Returns a list of test runs
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTestRuns(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestRun[]>): void;
    getTestRuns(ownerName: string, appName: string, callback: ServiceCallback<models.TestRun[]>): void;

    /**
     * Creates a new test run
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createTestRun(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    createTestRun(ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Get information about the currently active subscriptions, if any
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSubscriptions(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Subscription>): void;
    getSubscriptions(ownerName: string, appName: string, callback: ServiceCallback<models.Subscription>): void;

    /**
     * Accept a free trial subscription
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createSubscription(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Subscription>): void;
    createSubscription(ownerName: string, appName: string, callback: ServiceCallback<models.Subscription>): void;

    /**
     * Creates a short ID for a list of devices
     *
     * @param {array} devices List of device IDs
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createDeviceSelection(devices: string[], ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createDeviceSelection(devices: string[], ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns a list of available devices
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {uuid} [options.appUploadId] The ID of the test run
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeviceConfigurations(ownerName: string, appName: string, options: { appUploadId? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeviceConfiguration[]>): void;
    getDeviceConfigurations(ownerName: string, appName: string, callback: ServiceCallback<models.DeviceConfiguration[]>): void;
}

/**
 * @class
 * Tables
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Tables {

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} id
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTableRow(subscriptionId: string, tableName: string, id: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getTableRow(subscriptionId: string, tableName: string, id: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} id
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.permanent]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteTableRow(subscriptionId: string, tableName: string, id: string, ownerName: string, appName: string, options: { permanent? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteTableRow(subscriptionId: string, tableName: string, id: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.skip]
     * 
     * @param {number} [options.take]
     * 
     * @param {string} [options.sort]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTableData(subscriptionId: string, tableName: string, ownerName: string, appName: string, options: { skip? : number, take? : number, sort? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getTableData(subscriptionId: string, tableName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.csvData]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    importTableData(subscriptionId: string, tableName: string, ownerName: string, appName: string, options: { csvData? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    importTableData(subscriptionId: string, tableName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    clearTableData(subscriptionId: string, tableName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    clearTableData(subscriptionId: string, tableName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} columnName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getColumn(subscriptionId: string, tableName: string, columnName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getColumn(subscriptionId: string, tableName: string, columnName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} columnName
     * 
     * @param {object} column
     * 
     * @param {string} [column.name]
     * 
     * @param {boolean} [column.isIndexed]
     * 
     * @param {string} [column.type] Possible values include: 'String', 'Boolean',
     * 'Number', 'Date', 'Version', 'Custom'
     * 
     * @param {boolean} [column.canDelete]
     * 
     * @param {boolean} [column.canUpdateIndex]
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateColumn(subscriptionId: string, tableName: string, columnName: string, column: models.TableColumn, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updateColumn(subscriptionId: string, tableName: string, columnName: string, column: models.TableColumn, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} columnName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteColumn(subscriptionId: string, tableName: string, columnName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteColumn(subscriptionId: string, tableName: string, columnName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getColumnList(subscriptionId: string, tableName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getColumnList(subscriptionId: string, tableName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {object} column
     * 
     * @param {string} [column.name]
     * 
     * @param {boolean} [column.isIndexed]
     * 
     * @param {string} [column.type] Possible values include: 'String', 'Boolean',
     * 'Number', 'Date', 'Version', 'Custom'
     * 
     * @param {boolean} [column.canDelete]
     * 
     * @param {boolean} [column.canUpdateIndex]
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateColumnList(subscriptionId: string, tableName: string, column: models.TableColumn, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updateColumnList(subscriptionId: string, tableName: string, column: models.TableColumn, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTable(subscriptionId: string, tableName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getTable(subscriptionId: string, tableName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {object} table
     * 
     * @param {string} [table.name]
     * 
     * @param {array} [table.permissions]
     * 
     * @param {object} [table.extendedSettings]
     * 
     * @param {array} [table.columns]
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateTable(subscriptionId: string, tableName: string, table: models.Table, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updateTable(subscriptionId: string, tableName: string, table: models.Table, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteTable(subscriptionId: string, tableName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteTable(subscriptionId: string, tableName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTableList(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getTableList(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {object} table
     * 
     * @param {string} [table.name]
     * 
     * @param {array} [table.permissions]
     * 
     * @param {object} [table.extendedSettings]
     * 
     * @param {array} [table.columns]
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createTable(subscriptionId: string, table: models.Table, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createTable(subscriptionId: string, table: models.Table, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Azure
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Azure {

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteResourceGroup(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteResourceGroup(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getResourceGroup(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getResourceGroup(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    ping(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    ping(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} type Possible values include: 'appsvc', 'push'
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeploymentOperations(subscriptionId: string, type: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getDeploymentOperations(subscriptionId: string, type: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} type Possible values include: 'appsvc', 'push'
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    submitDeployment(subscriptionId: string, type: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    submitDeployment(subscriptionId: string, type: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} type Possible values include: 'appsvc', 'push'
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeployment(subscriptionId: string, type: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getDeployment(subscriptionId: string, type: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Push
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Push {

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getKeys(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getKeys(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getConfiguration(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getConfiguration(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.apnsCredential]
     * 
     * @param {string} [options.apnsCredential.endpoint]
     * 
     * @param {string} [options.apnsCredential.apnsCertificate]
     * 
     * @param {object} [options.gcmCredential]
     * 
     * @param {string} [options.gcmCredential.googleApiKey]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    setConfiguration(subscriptionId: string, ownerName: string, appName: string, options: { apnsCredential? : models.PushConfigApnsCredential, gcmCredential? : models.PushConfigGcmCredential, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    setConfiguration(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getNotificationHub(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getNotificationHub(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Identity
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Identity {

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getConfiguration(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getConfiguration(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    setConfiguration(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    setConfiguration(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Deprecated
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Deprecated {

    /**
     * Invites a new or existing user to an app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} userEmail The email of the user to invite
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    inviteAppUser(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    inviteAppUser(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;
}

/**
 * @class
 * Codepush
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Codepush {

    /**
     * Modifies a CodePush release metadata under the given Deployment
     *
     * @param {string} deploymentName deployment name
     * 
     * @param {string} releaseLabel release label
     * 
     * @param {object} release Release modification. All fields are optional and
     * only provided fields will get updated.
     * 
     * @param {string} [release.targetBinaryRange]
     * 
     * @param {string} [release.description]
     * 
     * @param {boolean} [release.isDisabled]
     * 
     * @param {boolean} [release.isMandatory]
     * 
     * @param {number} [release.rollout]
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    patchRelease(deploymentName: string, releaseLabel: string, release: models.LiveUpdateReleaseModification, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    patchRelease(deploymentName: string, releaseLabel: string, release: models.LiveUpdateReleaseModification, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Clears a Deployment of releases
     *
     * @param {string} deploymentName deployment name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteReleases(deploymentName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteReleases(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets the history of releases on a Deployment
     *
     * @param {string} deploymentName deployment name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getReleases(deploymentName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LiveUpdateRelease[]>): void;
    getReleases(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<models.LiveUpdateRelease[]>): void;

    /**
     * Gets all releases metrics for specified Deployment
     *
     * @param {string} deploymentName deployment name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeploymentMetrics(deploymentName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LiveUpdateReleaseMetric[]>): void;
    getDeploymentMetrics(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<models.LiveUpdateReleaseMetric[]>): void;

    /**
     * Deletes a CodePush Deployment (e.g. 'Staging') for the given app
     *
     * @param {string} deploymentName deployment name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteDeployment(deploymentName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteDeployment(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets a CodePush Deployment (e.g. 'Staging') for the given app
     *
     * @param {string} deploymentName deployment name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeployment(deploymentName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;
    getDeployment(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<models.Deployment>): void;

    /**
     * Modifies a CodePush Deployment (e.g. 'Staging') for the given app
     *
     * @param {string} deploymentName deployment name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.name]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    patchDeployment(deploymentName: string, ownerName: string, appName: string, options: { name? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    patchDeployment(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Report download of specified release
     *
     * @param {string} deploymentKey deployment key
     * 
     * @param {object} releaseMetadata Deployment status metric properties
     * 
     * @param {string} [releaseMetadata.label]
     * 
     * @param {string} [releaseMetadata.appVersion]
     * 
     * @param {string} [releaseMetadata.previousDeploymentKey]
     * 
     * @param {string} [releaseMetadata.previousLabelOrAppVersion]
     * 
     * @param {string} [releaseMetadata.status]
     * 
     * @param {string} [releaseMetadata.clientUniqueId]
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postDownloadStatusMetric(deploymentKey: string, releaseMetadata: models.LiveUpdateStatusMetricMetadata, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    postDownloadStatusMetric(deploymentKey: string, releaseMetadata: models.LiveUpdateStatusMetricMetadata, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Report Deployment status metric
     *
     * @param {string} deploymentKey deployment key
     * 
     * @param {object} releaseMetadata Deployment status metric properties
     * 
     * @param {string} [releaseMetadata.label]
     * 
     * @param {string} [releaseMetadata.appVersion]
     * 
     * @param {string} [releaseMetadata.previousDeploymentKey]
     * 
     * @param {string} [releaseMetadata.previousLabelOrAppVersion]
     * 
     * @param {string} [releaseMetadata.status]
     * 
     * @param {string} [releaseMetadata.clientUniqueId]
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postDeployStatusMetric(deploymentKey: string, releaseMetadata: models.LiveUpdateStatusMetricMetadata, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    postDeployStatusMetric(deploymentKey: string, releaseMetadata: models.LiveUpdateStatusMetricMetadata, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Gets a list of CodePush deployments (e.g. 'Staging', 'Production') for the
     * given app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeployments(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment[]>): void;
    getDeployments(ownerName: string, appName: string, callback: ServiceCallback<models.Deployment[]>): void;

    /**
     * Creates a CodePush Deployment (e.g. 'Staging') for the given app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.key]
     * 
     * @param {object} [options.latestRelease]
     * 
     * @param {string} [options.latestRelease.targetBinaryRange]
     * 
     * @param {string} [options.latestRelease.blobUrl]
     * 
     * @param {string} [options.latestRelease.description]
     * 
     * @param {boolean} [options.latestRelease.isDisabled]
     * 
     * @param {boolean} [options.latestRelease.isMandatory]
     * 
     * @param {string} [options.latestRelease.label]
     * 
     * @param {string} [options.latestRelease.originalDeployment] Set on 'Promote'
     * 
     * @param {string} [options.latestRelease.originalLabel] Set on 'Promote' and
     * 'Rollback'
     * 
     * @param {string} [options.latestRelease.hash]
     * 
     * @param {string} [options.latestRelease.releasedBy]
     * 
     * @param {string} [options.latestRelease.releaseMethod] The release method is
     * unknown if unspecified. Possible values include: 'Upload', 'Promote',
     * 'Rollback'
     * 
     * @param {number} [options.latestRelease.rollout]
     * 
     * @param {number} [options.latestRelease.size]
     * 
     * @param {number} [options.latestRelease.uploadTime]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postDeployments(ownerName: string, appName: string, name: string, options: { key? : string, latestRelease? : models.LiveUpdateRelease, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;
    postDeployments(ownerName: string, appName: string, name: string, callback: ServiceCallback<models.Deployment>): void;
}

/**
 * @class
 * Analytics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Analytics {

    /**
     * Count of active versions in the time range ordered by version.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    versions(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Versions>): void;
    versions(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.Versions>): void;

    /**
     * Count of sessions per device in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} interval Size of interval in ISO 8601 duration format.
     * (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D),
     * 1 week (P1W), and 30 days (P30D).
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    perDeviceCounts(start: Date|string, interval: string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionsPerDevice>): void;
    perDeviceCounts(start: Date|string, interval: string, ownerName: string, appName: string, callback: ServiceCallback<models.SessionsPerDevice>): void;

    /**
     * Gets session duration .
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    sessionDurationsDistribution(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionDurationsDistribution>): void;
    sessionDurationsDistribution(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.SessionDurationsDistribution>): void;

    /**
     * Count of sessions in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} interval Size of interval in ISO 8601 duration format.
     * (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D),
     * 1 week (P1W), and 30 days (P30D).
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    sessionCounts(start: Date|string, interval: string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionCounts>): void;
    sessionCounts(start: Date|string, interval: string, ownerName: string, appName: string, callback: ServiceCallback<models.SessionCounts>): void;

    /**
     * Places in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    placeCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Places>): void;
    placeCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.Places>): void;

    /**
     * OSes in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    operatingSystemCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OSes>): void;
    operatingSystemCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.OSes>): void;

    /**
     * models in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    modelCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AnalyticsModels>): void;
    modelCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.AnalyticsModels>): void;

    /**
     * Logs received between the specified start time and the current time. The
     * API will return a maximum of 100 logs per call.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.start] Start date time in data in ISO 8601 date time
     * format. It must be within the current day in the UTC timezone. The default
     * value is the start time of the current day in UTC timezone.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    logFlow(ownerName: string, appName: string, options: { start? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LogContainer>): void;
    logFlow(ownerName: string, appName: string, callback: ServiceCallback<models.LogContainer>): void;

    /**
     * languages in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    languageCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Languages>): void;
    languageCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.Languages>): void;

    /**
     * Event properties value counts during the time range in descending order.
     * Limited up to 5 values.
     *
     * @param {string} eventName The id of the event
     * 
     * @param {string} eventPropertyName The id of the event property
     * 
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {number} [options.count] The number of property values to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventPropertyCounts(eventName: string, eventPropertyName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], count? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventPropertyValues>): void;
    eventPropertyCounts(eventName: string, eventPropertyName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventPropertyValues>): void;

    /**
     * Event properties.  Up to the first 5 received properties.
     *
     * @param {string} eventName The id of the event
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventProperties(eventName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventProperties>): void;
    eventProperties(eventName: string, ownerName: string, appName: string, callback: ServiceCallback<models.EventProperties>): void;

    /**
     * Count of events by interval in the time range.
     *
     * @param {string} eventName The id of the event
     * 
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventCount(eventName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventCount>): void;
    eventCount(eventName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventCount>): void;

    /**
     * Count of devices for an event by interval in the time range.
     *
     * @param {string} eventName The id of the event
     * 
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventDeviceCount(eventName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventDeviceCount>): void;
    eventDeviceCount(eventName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventDeviceCount>): void;

    /**
     * Count of events per session by interval in the time range.
     *
     * @param {string} eventName The id of the event
     * 
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventPerSessionCount(eventName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventCountPerSession>): void;
    eventPerSessionCount(eventName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventCountPerSession>): void;

    /**
     * Count of events per device by interval in the time range.
     *
     * @param {string} eventName The id of the event
     * 
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventPerDeviceCount(eventName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventCountPerDevice>): void;
    eventPerDeviceCount(eventName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventCountPerDevice>): void;

    /**
     * Delete the set of Events with the specified event names
     *
     * @param {string} eventName The id of the event
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventsDelete(eventName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    eventsDelete(eventName: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Count of active events in the time range ordered by event.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {array} [options.eventName] to select the specific events
     * 
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     * 
     * @param {number} [options.skip] The offset (starting at 0) of the first
     * result to return. This parameter along with limit is used to perform
     * pagination.
     * 
     * @param {string} [options.inlinecount] Controls whether or not to include a
     * count of all the items accross all pages. Possible values include:
     * 'allpages', 'none'
     * 
     * @param {string} [options.orderby] controls the sorting order and sorting
     * based on which column
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    events(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], eventName? : string[], top? : number, skip? : number, inlinecount? : string, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Events>): void;
    events(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.Events>): void;

    /**
     * Delete the set of Events with the specified event names
     *
     * @param {string} eventName The id of the event
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventsDeleteLogs(eventName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    eventsDeleteLogs(eventName: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Percentage of crash-free device by day in the time range based on the
     * selected versions. Api will return -1 if crash devices is greater than
     * active devices
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashFreeDevicePercentages(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashFreeDevicePercentages>): void;
    crashFreeDevicePercentages(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashFreeDevicePercentages>): void;

    /**
     * Overall crashes and affected users count of the selected crash group with
     * selected version
     *
     * @param {string} crashGroupId The id of the crash group
     * 
     * @param {string} version
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupTotals(crashGroupId: string, version: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashOverall>): void;
    crashGroupTotals(crashGroupId: string, version: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashOverall>): void;

    /**
     * top OSes of the selected crash group with selected version
     *
     * @param {string} crashGroupId The id of the crash group
     * 
     * @param {string} version
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupOperatingSystemCounts(crashGroupId: string, version: string, ownerName: string, appName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroupOperatingSystems>): void;
    crashGroupOperatingSystemCounts(crashGroupId: string, version: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroupOperatingSystems>): void;

    /**
     * top models of the selected crash group with selected version
     *
     * @param {string} crashGroupId The id of the crash group
     * 
     * @param {string} version
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupModelCounts(crashGroupId: string, version: string, ownerName: string, appName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroupModels>): void;
    crashGroupModelCounts(crashGroupId: string, version: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroupModels>): void;

    /**
     * Count of crashes by day in the time range of the selected crash group with
     * selected version
     *
     * @param {string} crashGroupId The id of the crash group
     * 
     * @param {string} version
     * 
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupCounts(crashGroupId: string, version: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashCounts>): void;
    crashGroupCounts(crashGroupId: string, version: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashCounts>): void;

    /**
     * Overall crashes and affected users count of the selected crash groups with
     * selected versions
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {array} crashGroups
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupsTotals(ownerName: string, appName: string, crashGroups: models.CrashGroupAndVersion[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashesOverallItem[]>): void;
    crashGroupsTotals(ownerName: string, appName: string, crashGroups: models.CrashGroupAndVersion[], callback: ServiceCallback<models.CrashesOverallItem[]>): void;

    /**
     * Count of crashes by day in the time range based the selected versions.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashCounts>): void;
    crashCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashCounts>): void;

    /**
     * Count of active devices by interval in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deviceCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ActiveDeviceCounts>): void;
    deviceCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.ActiveDeviceCounts>): void;
}
