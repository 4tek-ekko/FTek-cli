/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Devices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Devices {

    /**
     * Registers a user for an existing device
     *
     * @param {string} userId The ID of the user
     * 
     * @param {object} body The device info.
     * 
     * @param {string} body.udid The Unique Device IDentifier of the device
     * 
     * @param {string} body.model The model identifier of the device, in the
     * format iDeviceM,N
     * 
     * @param {string} [body.osBuild] The build number of the last known OS
     * version running on the device
     * 
     * @param {string} [body.osVersion] The last known OS version running on the
     * device
     * 
     * @param {string} [body.serial] The device's serial number. Always empty or
     * undefined at present.
     * 
     * @param {string} [body.imei] The device's International Mobile Equipment
     * Identity number. Always empty or undefined at present.
     * 
     * @param {string} [body.ownerId] The user ID of the device owner.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    registerUserForDevice(userId: string, body: models.DeviceInfoRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    registerUserForDevice(userId: string, body: models.DeviceInfoRequest, callback: ServiceCallback<any>): void;

    /**
     * Returns all devices associated with the given distribution group.
     *
     * @param {string} distributionGroupName The name of the distribution group.
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.unprovisionedOnly] when true, filters out
     * provisioned devices
     * 
     * @param {array} [options.udids] multiple UDIDs which should be part of the
     * resulting CSV.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listCsvFormat(distributionGroupName: string, ownerName: string, appName: string, options: { unprovisionedOnly? : boolean, udids? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorDetails>): void;
    listCsvFormat(distributionGroupName: string, ownerName: string, appName: string, callback: ServiceCallback<models.ErrorDetails>): void;

    /**
     * Returns all devices associated with the given distribution group
     *
     * @param {string} distributionGroupName The name of the distribution group.
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(distributionGroupName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(distributionGroupName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * OrgInvitations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface OrgInvitations {

    /**
     * Rejects a pending organization invitation
     *
     * @param {string} invitationToken The app invitation token that was sent to
     * the user
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    reject(invitationToken: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    reject(invitationToken: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Accepts a pending organization invitation for the specified user
     *
     * @param {string} invitationToken The app invitation token that was sent to
     * the user
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    accept(invitationToken: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    accept(invitationToken: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Cancels an existing organization for the user and sends a new one
     *
     * @param {string} orgName The organization's name
     * 
     * @param {string} userEmail The user's email address'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    sendNewInvitation(orgName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    sendNewInvitation(orgName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Invites a new or existing user to an organization
     *
     * @param {string} orgName The organization's name
     * 
     * @param {string} userEmail The user's email address'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(orgName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    create(orgName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Removes a user's invitation to an organization
     *
     * @param {string} orgName The organization's name
     * 
     * @param {string} userEmail The user's email address'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(orgName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteMethod(orgName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Gets the pending invitations for the organization
     *
     * @param {string} orgName The organization's name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listPending(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listPending(orgName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * DistributionGroupInvitations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface DistributionGroupInvitations {

    /**
     * Accepts all pending invitations to distribution groups for the specified
     * user
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    acceptAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    acceptAll(callback: ServiceCallback<models.ErrorResponse>): void;
}

/**
 * @class
 * AppInvitations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface AppInvitations {

    /**
     * Rejects a pending invitation for the specified user
     *
     * @param {string} invitationToken The app invitation token that was sent to
     * the user
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    reject(invitationToken: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    reject(invitationToken: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Accepts a pending invitation for the specified user
     *
     * @param {string} invitationToken The app invitation token that was sent to
     * the user
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    accept(invitationToken: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    accept(invitationToken: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Invites a new or existing user to an app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} userEmail The email of the user to invite
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createByEmail(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    createByEmail(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Update pending invitation permission
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} userEmail The email of the user to invite
     * 
     * @param {array} permissions The permissions the user has for the app in the
     * invitation
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updatePermissions(ownerName: string, appName: string, userEmail: string, permissions: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    updatePermissions(ownerName: string, appName: string, userEmail: string, permissions: string[], callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Removes a user's invitation to an app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} userEmail The email of the user to invite
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteMethod(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Invites a new or existing user to an app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} userEmail The user's email address'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    create(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Gets the pending invitations for the app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Users
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Users {

    /**
     * Returns the user profile data
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    get(callback: ServiceCallback<any>): void;

    /**
     * Updates the user profile and returns the updated user data
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.displayName] The full name of the user. Might for
     * example be first and last name
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(options: { displayName? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    update(callback: ServiceCallback<any>): void;

    /**
     * Updates the given organization user
     *
     * @param {string} orgName The organization's name
     * 
     * @param {string} userName The slug name of the user
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.role] The user's role in the organizatiion.
     * Possible values include: 'admin', 'collaborator'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateOrgRole(orgName: string, userName: string, options: { role? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updateOrgRole(orgName: string, userName: string, callback: ServiceCallback<any>): void;

    /**
     * Removes a user from an organization.
     *
     * @param {string} orgName The organization's name
     * 
     * @param {string} userName The slug name of the user
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    removeFromOrg(orgName: string, userName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    removeFromOrg(orgName: string, userName: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Returns a list of users that belong to an organization
     *
     * @param {string} orgName The organization's name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForOrg(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listForOrg(orgName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns the users associated with the app specified with the given app name
     * which belongs to the given owner.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Releases
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Releases {

    /**
     * Get a release with hash 'release_hash' or the 'latest' from all the
     * distribution groups assigned to the current user.
     *
     * @param {string} appSecret The secret of the target application
     * 
     * @param {string} releaseHash The hash of the release or 'latest' to get the
     * latest release from all the distribution groups assigned to the current
     * user.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLatestByHash(appSecret: string, releaseHash: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getLatestByHash(appSecret: string, releaseHash: string, callback: ServiceCallback<any>): void;

    /**
     * Get a release with id `release_id`. if `release_id` is `latest`, return the
     * latest release that was distributed to the current user (from all the
     * distribution groups).
     *
     * @param {string} releaseId The ID of the release, or `latest` to get the
     * latest release from all the distribution groups assigned to the current
     * user.
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.udid] when supplied, this call will also check if
     * the given UDID is provisioned. Will be ignored for non-iOS platforms. The
     * value will be returned in the property is_udid_provisioned.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLatestByUser(releaseId: string, ownerName: string, appName: string, options: { udid? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getLatestByUser(releaseId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Updates a release.
     *
     * @param {number} releaseId The ID of the release
     * 
     * @param {object} body The release information.
     * 
     * @param {string} [body.distributionGroupName] OBSOLETE. Will be removed in
     * future releases. Name of a distribution group. The release will be
     * associated with this distribution group. If the distribution group doesn't
     * exist a 400 is returned. If both distribution group name and id are
     * passed, the id is taking precedence.
     * 
     * @param {string} [body.distributionGroupId] OBSOLETE. Will be removed in
     * future releases. Id of a distribution group. The release will be
     * associated with this distribution group. If the distribution group doesn't
     * exist a 400 is returned. If both distribution group name and id are
     * passed, the id is taking precedence.
     * 
     * @param {string} [body.destinationName] Name of a distribution group /
     * distribution store. The release will be associated with this distribution
     * group or store. If the distribution group / store doesn't exist a 400 is
     * returned. If both distribution group / store name and id are passed, the
     * id is taking precedence.
     * 
     * @param {string} [body.destinationId] Id of a distribution group / store.
     * The release will be associated with this distribution group / store. If
     * the distribution group / store doesn't exist a 400 is returned. If both
     * distribution group / store name and id are passed, the id is taking
     * precedence.
     * 
     * @param {string} [body.destinationType] The destination type.<br>
     * <b>group</b>: The release distributed to internal groups and
     * distribution_groups details will be returned.<br>
     * <b>store</b>: Coming Soon - The release distributed to external stores and
     * distribution_stores details will be returned. <br>
     * . Possible values include: 'group', 'store'
     * 
     * @param {string} [body.releaseNotes] Release notes for this release.
     * 
     * @param {boolean} [body.mandatoryUpdate] A boolean which determines whether
     * this version should be a mandatory update or not.
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(releaseId: number, body: models.ReleaseUpdateRequest, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    update(releaseId: number, body: models.ReleaseUpdateRequest, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Deletes a release.
     *
     * @param {string} releaseId The ID of the release
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(releaseId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorDetails>): void;
    deleteMethod(releaseId: string, ownerName: string, appName: string, callback: ServiceCallback<models.ErrorDetails>): void;

    /**
     * This API can be used to create a release based on an existing release. The
     * release will reuse most of the properties of the base release such as the
     * binary but might differ e.g. in its distribution group, release notes, and
     * mandatory updates flag based on the info given. To create a new release
     * that doesn't base on an existing one, you should use the `release_uploads`
     * APIs.
     *
     * @param {object} body The release information.
     * 
     * @param {string} [body.distributionGroupName] Name of a distribution group.
     * The release will be associated with this distribution group. If the
     * distribution group doesn't exist a 400 is returned. If both distribution
     * group name and id are passed, the id is taking precedence.
     * 
     * @param {string} [body.distributionGroupId] Id of a distribution group. The
     * release will be associated with this distribution group. If the
     * distribution group doesn't exist a 400 is returned. If both distribution
     * group name and id are passed, the id is taking precedence.
     * 
     * @param {string} [body.releaseNotes] Release notes for this release.
     * 
     * @param {boolean} [body.mandatoryUpdate] A boolean which determines whether
     * this version should be a mandatory update or not.
     * 
     * @param {number} body.baseReleaseId The ID of the release that should be
     * re-released
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    rerelease(body: models.RereleaseRequest, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReleaseDetails>): void;
    rerelease(body: models.RereleaseRequest, ownerName: string, appName: string, callback: ServiceCallback<models.ReleaseDetails>): void;

    /**
     * Return detailed information about releases.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.publishedOnly] when *true*, filters out releases
     * that were uploaded but were never distributed. Releases that under deleted
     * distribution groups will not be filtered out.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(ownerName: string, appName: string, options: { publishedOnly? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BasicReleaseDetails[]>): void;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.BasicReleaseDetails[]>): void;

    /**
     * Get the latest release from every distribution group associated with an
     * application.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listLatest(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BasicReleaseDetails[]>): void;
    listLatest(ownerName: string, appName: string, callback: ServiceCallback<models.BasicReleaseDetails[]>): void;

    /**
     * Return detailed information about a distributed release in a given
     * distribution group.
     *
     * @param {string} distributionGroupName The name of the distribution group.
     * 
     * @param {string} releaseId Must be `latest`, a specific `release_id` is not
     * supported at this time.
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLatestByDistributionGroup(distributionGroupName: string, releaseId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getLatestByDistributionGroup(distributionGroupName: string, releaseId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Deletes a release with id 'release_id' in a given distribution group.
     *
     * @param {string} distributionGroupName The name of the distribution group.
     * 
     * @param {string} releaseId The ID identifying the unique release.
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteWithDistributionGroupId(distributionGroupName: string, releaseId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteWithDistributionGroupId(distributionGroupName: string, releaseId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Return detailed information about distributed releases in a given
     * distribution group.
     *
     * @param {string} distributionGroupName The name of the distribution group.
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByDistributionGroup(distributionGroupName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listByDistributionGroup(distributionGroupName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Apps
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Apps {

    /**
     * Creates a new app for the organizatiion and returns it to the caller
     *
     * @param {string} orgName The organization's name
     * 
     * @param {object} app The data for the app
     * 
     * @param {string} [app.description] A short text describing the app
     * 
     * @param {string} app.displayName The descriptive name of the app. This can
     * contain any characters
     * 
     * @param {string} [app.name] The name of the app used in URLs
     * 
     * @param {string} app.os The OS the app will be running on. Possible values
     * include: 'Android', 'iOS', 'Tizen', 'Windows'
     * 
     * @param {string} app.platform The platform of the app. Possible values
     * include: 'Cordova', 'Java', 'Objective-C-Swift', 'React-Native', 'UWP',
     * 'Xamarin'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createForOrg(orgName: string, app: models.App, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createForOrg(orgName: string, app: models.App, callback: ServiceCallback<any>): void;

    /**
     * Returns a list of apps for the organization
     *
     * @param {string} orgName The organization's name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listForOrg(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listForOrg(orgName: string, callback: ServiceCallback<any>): void;

    /**
     * Removes the user from the app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} userEmail The user email of the user to delete
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    removeUser(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    removeUser(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Update user permission for the app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} userEmail The user email of the user to patch
     * 
     * @param {array} permissions The permissions the user has for the app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateUserPermissions(ownerName: string, appName: string, userEmail: string, permissions: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    updateUserPermissions(ownerName: string, appName: string, userEmail: string, permissions: string[], callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Transfers ownership of an app to a different user or organization
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} destinationOwnerName The name of the owner (user or
     * organization) to which the app is being transferred
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    transferOwnership(ownerName: string, appName: string, destinationOwnerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    transferOwnership(ownerName: string, appName: string, destinationOwnerName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns the testers associated with the app specified with the given app
     * name which belongs to the given owner.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listTesters(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listTesters(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Return a specific app with the given app name which belongs to the given
     * owner.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    get(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Partially updates a single app
     *
     * @param {string} appName The name of the application
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.description] A short text describing the app
     * 
     * @param {string} [options.displayName] The display name of the app
     * 
     * @param {string} [options.name] The name of the app used in URLs
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(appName: string, ownerName: string, options: { description? : string, displayName? : string, name? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    update(appName: string, ownerName: string, callback: ServiceCallback<any>): void;

    /**
     * Delete an app
     *
     * @param {string} appName The name of the application
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(appName: string, ownerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteMethod(appName: string, ownerName: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Creates a new app and returns it to the caller
     *
     * @param {object} app The data for the app
     * 
     * @param {string} [app.description] A short text describing the app
     * 
     * @param {string} app.displayName The descriptive name of the app. This can
     * contain any characters
     * 
     * @param {string} [app.name] The name of the app used in URLs
     * 
     * @param {string} app.os The OS the app will be running on. Possible values
     * include: 'Android', 'iOS', 'Tizen', 'Windows'
     * 
     * @param {string} app.platform The platform of the app. Possible values
     * include: 'Cordova', 'Java', 'Objective-C-Swift', 'React-Native', 'UWP',
     * 'Xamarin'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(app: models.App, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    create(app: models.App, callback: ServiceCallback<any>): void;

    /**
     * Returns a list of apps
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Organizations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Organizations {

    /**
     * Returns the details of a single organization
     *
     * @param {string} orgName The organization's name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    get(orgName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns a list of organizations the requesting user has access to
     *
     * @param {string} orgName The organization's name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.displayName] The full (friendly) name of the
     * organization.
     * 
     * @param {string} [options.name] The name of the organization used in URLs
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(orgName: string, options: { displayName? : string, name? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    update(orgName: string, callback: ServiceCallback<any>): void;

    /**
     * Deletes a single organization
     *
     * @param {string} orgName The organization's name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(orgName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteMethod(orgName: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Returns a list of organizations the requesting user has access to
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Organization
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Organization {

    /**
     * Creates a new organization and returns it to the caller
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.displayName] The display name of the organization
     * 
     * @param {string} [options.name] The name of the organization used in URLs
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdate(options: { displayName? : string, name? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createOrUpdate(callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Builds
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Builds {

    /**
     * Gets the Xcode versions available to this app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listXcodeVersions(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listXcodeVersions(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Gets the Mono versions available to this app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listMonoVersions(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listMonoVersions(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Get the build log
     *
     * @param {number} buildId The build ID
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLog(buildId: number, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildLog>): void;
    getLog(buildId: number, ownerName: string, appName: string, callback: ServiceCallback<models.BuildLog>): void;

    /**
     * Gets the download URI
     *
     * @param {number} buildId The build ID
     * 
     * @param {string} downloadType The download type. Possible values include:
     * 'build', 'symbols', 'logs', 'test-report-preview'
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDownloadUri(buildId: number, downloadType: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DownloadContainer>): void;
    getDownloadUri(buildId: number, downloadType: string, ownerName: string, appName: string, callback: ServiceCallback<models.DownloadContainer>): void;

    /**
     * Distribute a build
     *
     * @param {number} buildId The build ID
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} distributionGroupId The distribution group ID
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.releaseNotes] The release notes
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    distribute(buildId: number, ownerName: string, appName: string, distributionGroupId: string, options: { releaseNotes? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DistributionResponse>): void;
    distribute(buildId: number, ownerName: string, appName: string, distributionGroupId: string, callback: ServiceCallback<models.DistributionResponse>): void;

    /**
     * Returns the build detail for the given build ID
     *
     * @param {number} buildId The build ID
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(buildId: number, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build>): void;
    get(buildId: number, ownerName: string, appName: string, callback: ServiceCallback<models.Build>): void;

    /**
     * Cancels a build
     *
     * @param {number} buildId The build ID
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.status] The build status; used to cancel builds.
     * Possible values include: 'cancelling'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(buildId: number, ownerName: string, appName: string, options: { status? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build>): void;
    update(buildId: number, ownerName: string, appName: string, callback: ServiceCallback<models.Build>): void;

    /**
     * Application specific build service status
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getStatusByAppId(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BuildServiceStatus>): void;
    getStatusByAppId(ownerName: string, appName: string, callback: ServiceCallback<models.BuildServiceStatus>): void;

    /**
     * Returns the projects in the repository for the branch, for all toolsets
     *
     * @param {string} branch The branch name
     * 
     * @param {string} os The desired OS for the project scan; normally the same
     * as the app OS. Possible values include: 'iOS', 'Android', 'Windows'
     * 
     * @param {string} platform The desired platform for the project scan.
     * Possible values include: 'Objective-C-Swift', 'React-Native', 'Xamarin',
     * 'Java', 'UWP'
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listToolsetProjects(branch: string, os: string, platform: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ToolsetProjects>): void;
    listToolsetProjects(branch: string, os: string, platform: string, ownerName: string, appName: string, callback: ServiceCallback<models.ToolsetProjects>): void;

    /**
     * Returns the list of builds for the branch
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByBranch(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build[]>): void;
    listByBranch(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.Build[]>): void;

    /**
     * Create a build
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.sourceVersion] Version to build
     * 
     * @param {boolean} [options.debug] Run build in debug mode
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    queue(branch: string, ownerName: string, appName: string, options: { sourceVersion? : string, debug? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build>): void;
    queue(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.Build>): void;

    /**
     * Returns the list of Git branches for this application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listBranches(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listBranches(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Crashes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Crashes {

    /**
     * @summary Gets a list of application versions
     *
     * Gets a list of application versions
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAppVersions(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppVersion[]>): void;
    getAppVersions(ownerName: string, appName: string, callback: ServiceCallback<models.AppVersion[]>): void;

    /**
     * @summary Gets whether the application has any crashes
     *
     * Gets whether the application has any crashes
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAppCrashesInfo(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppCrashesInfo>): void;
    getAppCrashesInfo(ownerName: string, appName: string, callback: ServiceCallback<models.AppCrashesInfo>): void;

    /**
     * Get session logs by crash ID
     *
     * @param {string} crashId The id of the a crash
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSessionLogs(crashId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LogContainer>): void;
    listSessionLogs(crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.LogContainer>): void;

    /**
     * Gets url to download attachment
     *
     * @param {string} crashId id of a specific crash
     * 
     * @param {string} attachmentId attachment id
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCrashAttachmentUrl(crashId: string, attachmentId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    getCrashAttachmentUrl(crashId: string, attachmentId: string, ownerName: string, appName: string, callback: ServiceCallback<string>): void;

    /**
     * Gets content of the text attachment
     *
     * @param {string} crashId id of a specific crash
     * 
     * @param {string} attachmentId attachment id
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCrashTextAttachmentContent(crashId: string, attachmentId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    getCrashTextAttachmentContent(crashId: string, attachmentId: string, ownerName: string, appName: string, callback: ServiceCallback<string>): void;

    /**
     * Gets all attachments for a specific crash
     *
     * @param {string} crashId id of a specific crash
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listAttachments(crashId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashAttachment[]>): void;
    listAttachments(crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashAttachment[]>): void;

    /**
     * query azure search
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} search
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.dateFrom]
     * 
     * @param {date} [options.dateTo]
     * 
     * @param {string} [options.appVersion] version
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    searchCrashes(crashGroupId: string, ownerName: string, appName: string, search: string, options: { dateFrom? : Date, dateTo? : Date, appVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    searchCrashes(crashGroupId: string, ownerName: string, appName: string, search: string, callback: ServiceCallback<any>): void;

    /**
     * Gets a stacktrace for a specific crash
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} crashId id of a specific crash
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.groupingOnly] true if the stacktrace should be
     * only the relevant thread / exception. Default is false
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getStacktrace(crashGroupId: string, crashId: string, ownerName: string, appName: string, options: { groupingOnly? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Stacktrace>): void;
    getStacktrace(crashGroupId: string, crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Stacktrace>): void;

    /**
     * Gets the URL to download json of a specific crash
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} crashId id of a specific crash
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRawCrashUrl(crashGroupId: string, crashId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashRawUrl>): void;
    getRawCrashUrl(crashGroupId: string, crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashRawUrl>): void;

    /**
     * @summary Gets the native log of a specific crash
     *
     * Gets the native log of a specific crash
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} crashId id of a specific crash
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getNativeCrash(crashGroupId: string, crashId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
    getNativeCrash(crashGroupId: string, crashId: string, ownerName: string, appName: string, callback: ServiceCallback<string>): void;

    /**
     * Gets a specific crash for an app
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} crashId id of a specific crash
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.includeReport] true if the crash should include
     * the raw crash report. Default is false
     * 
     * @param {boolean} [options.includeLog] true if the crash should include the
     * custom log report. Default is false
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(crashGroupId: string, crashId: string, ownerName: string, appName: string, options: { includeReport? : boolean, includeLog? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Crash>): void;
    get(crashGroupId: string, crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Crash>): void;

    /**
     * Gets all crashes of a group
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.includeReport] true if the crash should include
     * the raw crash report. Default is false
     * 
     * @param {boolean} [options.includeLog] true if the crash should include the
     * custom log report. Default is false
     * 
     * @param {date} [options.dateFrom]
     * 
     * @param {date} [options.dateTo]
     * 
     * @param {string} [options.appVersion] version
     * 
     * @param {string} [options.errorType] Possible values include:
     * 'CrashingErrors', 'HandledErrors'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(crashGroupId: string, ownerName: string, appName: string, options: { includeReport? : boolean, includeLog? : boolean, dateFrom? : Date, dateTo? : Date, appVersion? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Crash[]>): void;
    list(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Crash[]>): void;
}

/**
 * @class
 * Test
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Test {

    /**
     * Gets a device set belonging to the user
     *
     * @param {string} id The ID of the device set
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeviceSetOfUser(id: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeviceSet>): void;
    getDeviceSetOfUser(id: string, ownerName: string, appName: string, callback: ServiceCallback<models.DeviceSet>): void;

    /**
     * Updates a device set belonging to the user
     *
     * @param {string} id The ID of the device set
     * 
     * @param {array} devices List of device IDs
     * 
     * @param {string} name The name of the device set
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateDeviceSetOfUser(id: string, devices: string[], name: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updateDeviceSetOfUser(id: string, devices: string[], name: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Deletes a device set belonging to the user
     *
     * @param {string} id The ID of the device set
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteDeviceSetOfUser(id: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteDeviceSetOfUser(id: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Lists device sets belonging to the user
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listDeviceSetsOfUser(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeviceSet[]>): void;
    listDeviceSetsOfUser(ownerName: string, appName: string, callback: ServiceCallback<models.DeviceSet[]>): void;

    /**
     * Creates a device set belonging to the user
     *
     * @param {array} devices List of device IDs
     * 
     * @param {string} name The name of the device set
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createDeviceSetOfUser(devices: string[], name: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createDeviceSetOfUser(devices: string[], name: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns list of all test runs for a given test series
     *
     * @param {string} testSeriesSlug The slug of the test series
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllTestRunsForSeries(testSeriesSlug: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestRun[]>): void;
    getAllTestRunsForSeries(testSeriesSlug: string, ownerName: string, appName: string, callback: ServiceCallback<models.TestRun[]>): void;

    /**
     * Deletes a single test series
     *
     * @param {string} testSeriesSlug The slug of the test series
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteTestSeries(testSeriesSlug: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteTestSeries(testSeriesSlug: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Updates name and slug of a test series
     *
     * @param {string} testSeriesSlug The slug of the test series
     * 
     * @param {string} name New name of the new test series
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    patchTestSeries(testSeriesSlug: string, name: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestSeries>): void;
    patchTestSeries(testSeriesSlug: string, name: string, ownerName: string, appName: string, callback: ServiceCallback<models.TestSeries>): void;

    /**
     * Returns list of all test series for an application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllTestSeries(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestSeries[]>): void;
    getAllTestSeries(ownerName: string, appName: string, callback: ServiceCallback<models.TestSeries[]>): void;

    /**
     * Creates new test series for an application
     *
     * @param {string} name Name of the new test series
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createTestSeries(name: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createTestSeries(name: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Stop a test run execution
     *
     * @param {string} testRunId The ID of the test run to be stopped
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    stopTestRun(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestRun>): void;
    stopTestRun(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<models.TestRun>): void;

    /**
     * Gets state of the test run
     *
     * @param {string} testRunId The ID of the test run
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTestRunState(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestRunState>): void;
    getTestRunState(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<models.TestRunState>): void;

    /**
     * Starts test run
     *
     * @param {string} testRunId The ID of the test run
     * 
     * @param {object} startOptions Option required to start the test run
     * 
     * @param {string} startOptions.testFramework Test framework used by tests.
     * 
     * @param {string} startOptions.deviceSelection Device selection string.
     * 
     * @param {string} [startOptions.language] Language that should be used to run
     * tests.
     * 
     * @param {string} [startOptions.locale] Locale that should be used to run
     * tests.
     * 
     * @param {string} [startOptions.testSeries] Name of the test series.
     * 
     * @param {object} [startOptions.testParameters] A JSON dictionary with
     * additional test parameters
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    startTestRun(testRunId: string, startOptions: models.TestCloudStartTestRunOptions, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestCloudStartTestRunResult>): void;
    startTestRun(testRunId: string, startOptions: models.TestCloudStartTestRunOptions, ownerName: string, appName: string, callback: ServiceCallback<models.TestCloudStartTestRunResult>): void;

    /**
     * Returns a single test report
     *
     * @param {uuid} testRunId The ID of the test run
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTestReport(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestReport>): void;
    getTestReport(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<models.TestReport>): void;

    /**
     * Adds file with the given hash to a test run
     *
     * @param {string} testRunId The ID of the test run
     * 
     * @param {array} fileInfo File hash information
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    uploadHashesBatch(testRunId: string, fileInfo: models.TestCloudFileHash[], ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestCloudFileHashResponse[]>): void;
    uploadHashesBatch(testRunId: string, fileInfo: models.TestCloudFileHash[], ownerName: string, appName: string, callback: ServiceCallback<models.TestCloudFileHashResponse[]>): void;

    /**
     * Adds file with the given hash to a test run
     *
     * @param {string} testRunId The ID of the test run
     * 
     * @param {object} fileInfo File hash information
     * 
     * @param {string} fileInfo.fileType Type of the file. Possible values
     * include: 'dsym-file', 'app-file', 'test-file'
     * 
     * @param {string} fileInfo.checksum SHA256 hash of the file
     * 
     * @param {string} fileInfo.relativePath Relative path of the file
     * 
     * @param {string} [fileInfo.byteRange] Range of bytes required to verify
     * ownership of the file
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    uploadHash(testRunId: string, fileInfo: models.TestCloudFileHashDeprecated, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    uploadHash(testRunId: string, fileInfo: models.TestCloudFileHashDeprecated, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Uploads file for a test run
     *
     * @param {string} testRunId The ID of the test run
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    startUploadingFile(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    startUploadingFile(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns a single test runs
     *
     * @param {uuid} testRunId The ID of the test run
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTestRun(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestRun>): void;
    getTestRun(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<models.TestRun>): void;

    /**
     * Logically deletes a test run
     *
     * @param {uuid} testRunId The ID of the test run
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    archiveTestRun(testRunId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestRun>): void;
    archiveTestRun(testRunId: string, ownerName: string, appName: string, callback: ServiceCallback<models.TestRun>): void;

    /**
     * Returns a list of test runs
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTestRuns(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TestRun[]>): void;
    getTestRuns(ownerName: string, appName: string, callback: ServiceCallback<models.TestRun[]>): void;

    /**
     * Creates a new test run
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createTestRun(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    createTestRun(ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Get information about the currently active subscriptions, if any
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSubscriptions(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Subscription>): void;
    getSubscriptions(ownerName: string, appName: string, callback: ServiceCallback<models.Subscription>): void;

    /**
     * Accept a free trial subscription
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createSubscription(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Subscription>): void;
    createSubscription(ownerName: string, appName: string, callback: ServiceCallback<models.Subscription>): void;

    /**
     * Gets a device set belonging to the owner
     *
     * @param {string} id The ID of the device set
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeviceSetOfOwner(id: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeviceSet>): void;
    getDeviceSetOfOwner(id: string, ownerName: string, appName: string, callback: ServiceCallback<models.DeviceSet>): void;

    /**
     * Updates a device set belonging to the owner
     *
     * @param {string} id The ID of the device set
     * 
     * @param {array} devices List of device IDs
     * 
     * @param {string} name The name of the device set
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateDeviceSetOfOwner(id: string, devices: string[], name: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updateDeviceSetOfOwner(id: string, devices: string[], name: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Deletes a device set belonging to the owner
     *
     * @param {string} id The ID of the device set
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteDeviceSetOfOwner(id: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteDeviceSetOfOwner(id: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Lists device sets belonging to the owner
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listDeviceSetsOfOwner(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeviceSet[]>): void;
    listDeviceSetsOfOwner(ownerName: string, appName: string, callback: ServiceCallback<models.DeviceSet[]>): void;

    /**
     * Creates a device set belonging to the owner
     *
     * @param {array} devices List of device IDs
     * 
     * @param {string} name The name of the device set
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createDeviceSetOfOwner(devices: string[], name: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createDeviceSetOfOwner(devices: string[], name: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Creates a short ID for a list of devices
     *
     * @param {array} devices List of device IDs
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createDeviceSelection(devices: string[], ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createDeviceSelection(devices: string[], ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns a list of available devices
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {uuid} [options.appUploadId] The ID of the test run
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeviceConfigurations(ownerName: string, appName: string, options: { appUploadId? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeviceConfiguration[]>): void;
    getDeviceConfigurations(ownerName: string, appName: string, callback: ServiceCallback<models.DeviceConfiguration[]>): void;
}

/**
 * @class
 * Symbols
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Symbols {

    /**
     * Marks a symbol by id (uuid) as ignored
     *
     * @param {string} symbolId The ID of the symbol (uuid of the symbol)
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    ignore(symbolId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    ignore(symbolId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns a particular symbol by id (uuid) for the provided application
     *
     * @param {string} symbolId The ID of the symbol (uuid of the symbol)
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(symbolId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    get(symbolId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns the list of all symbols for the provided application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * SymbolUploads
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface SymbolUploads {

    /**
     * Gets a symbol upload by id for the specified application
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(symbolUploadId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    get(symbolUploadId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Commits or aborts the symbol upload process for a new set of symbols for
     * the specified application
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} status The desired operation for the symbol upload.
     * Possible values include: 'committed', 'aborted'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    complete(symbolUploadId: string, ownerName: string, appName: string, status: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    complete(symbolUploadId: string, ownerName: string, appName: string, status: string, callback: ServiceCallback<any>): void;

    /**
     * Gets a list of all uploads for the specified application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Begins the symbol upload process for a new set of symbols for the specified
     * application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.clientCallback] The callback URL that the client
     * can optionally provide to get status updates for the current symbol upload
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(ownerName: string, appName: string, options: { clientCallback? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    create(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * MissingSymbolGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface MissingSymbolGroups {

    /**
     * @summary Gets application level statistics for all missing symbol groups
     *
     * Gets application level statistics for all missing symbol groups
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    info(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MissingSymbolCrashGroupsInfoResponse>): void;
    info(ownerName: string, appName: string, callback: ServiceCallback<models.MissingSymbolCrashGroupsInfoResponse>): void;

    /**
     * @summary Gets missing symbol crash group by its id
     *
     * Gets missing symbol crash group by its id
     *
     * @param {string} symbolGroupId missing symbol crash group id
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(symbolGroupId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MissingSymbolCrashGroupsResponse>): void;
    get(symbolGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.MissingSymbolCrashGroupsResponse>): void;

    /**
     * @summary Gets top N (ordered by crash count) of crash groups by missing
     * symbol
     *
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     *
     * @param {number} top top N elements
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] query filter
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(top: number, ownerName: string, appName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MissingSymbolCrashGroupsResponse>): void;
    list(top: number, ownerName: string, appName: string, callback: ServiceCallback<models.MissingSymbolCrashGroupsResponse>): void;
}

/**
 * @class
 * Tables
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Tables {

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} id
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTableRow(subscriptionId: string, tableName: string, id: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getTableRow(subscriptionId: string, tableName: string, id: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} id
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.permanent]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteTableRow(subscriptionId: string, tableName: string, id: string, ownerName: string, appName: string, options: { permanent? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteTableRow(subscriptionId: string, tableName: string, id: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.skip]
     * 
     * @param {number} [options.take]
     * 
     * @param {string} [options.sort]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTableData(subscriptionId: string, tableName: string, ownerName: string, appName: string, options: { skip? : number, take? : number, sort? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getTableData(subscriptionId: string, tableName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.csvData]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    importTableData(subscriptionId: string, tableName: string, ownerName: string, appName: string, options: { csvData? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    importTableData(subscriptionId: string, tableName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    clearTableData(subscriptionId: string, tableName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    clearTableData(subscriptionId: string, tableName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} columnName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getColumn(subscriptionId: string, tableName: string, columnName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getColumn(subscriptionId: string, tableName: string, columnName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} columnName
     * 
     * @param {object} column
     * 
     * @param {string} [column.name]
     * 
     * @param {boolean} [column.isIndexed]
     * 
     * @param {string} [column.type] Possible values include: 'String', 'Boolean',
     * 'Number', 'Date', 'Version', 'Custom'
     * 
     * @param {boolean} [column.canDelete]
     * 
     * @param {boolean} [column.canUpdateIndex]
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateColumn(subscriptionId: string, tableName: string, columnName: string, column: models.TableColumn, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updateColumn(subscriptionId: string, tableName: string, columnName: string, column: models.TableColumn, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} columnName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteColumn(subscriptionId: string, tableName: string, columnName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteColumn(subscriptionId: string, tableName: string, columnName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getColumnList(subscriptionId: string, tableName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getColumnList(subscriptionId: string, tableName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {object} column
     * 
     * @param {string} [column.name]
     * 
     * @param {boolean} [column.isIndexed]
     * 
     * @param {string} [column.type] Possible values include: 'String', 'Boolean',
     * 'Number', 'Date', 'Version', 'Custom'
     * 
     * @param {boolean} [column.canDelete]
     * 
     * @param {boolean} [column.canUpdateIndex]
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateColumnList(subscriptionId: string, tableName: string, column: models.TableColumn, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updateColumnList(subscriptionId: string, tableName: string, column: models.TableColumn, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTable(subscriptionId: string, tableName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getTable(subscriptionId: string, tableName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {object} table
     * 
     * @param {string} [table.name]
     * 
     * @param {array} [table.permissions]
     * 
     * @param {object} [table.extendedSettings]
     * 
     * @param {array} [table.columns]
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateTable(subscriptionId: string, tableName: string, table: models.Table, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updateTable(subscriptionId: string, tableName: string, table: models.Table, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} tableName
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteTable(subscriptionId: string, tableName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteTable(subscriptionId: string, tableName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTableList(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getTableList(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {object} table
     * 
     * @param {string} [table.name]
     * 
     * @param {array} [table.permissions]
     * 
     * @param {object} [table.extendedSettings]
     * 
     * @param {array} [table.columns]
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createTable(subscriptionId: string, table: models.Table, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    createTable(subscriptionId: string, table: models.Table, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Azure
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Azure {

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteResourceGroup(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteResourceGroup(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getResourceGroup(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getResourceGroup(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    ping(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    ping(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeploymentOperations(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getDeploymentOperations(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    submitDeployment(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    submitDeployment(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeployment(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getDeployment(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Identity
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Identity {

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getConfiguration(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getConfiguration(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    setConfiguration(subscriptionId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    setConfiguration(subscriptionId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Repositories
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Repositories {

    /**
     * Gets the repositories available from the source code host
     *
     * @param {string} sourceHost The source host. Possible values include:
     * 'github', 'bitbucket', 'vsts'
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.form] The selected form of the object. Possible
     * values include: 'lite', 'full'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(sourceHost: string, ownerName: string, appName: string, options: { form? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(sourceHost: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * RepositoryConfigurations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface RepositoryConfigurations {

    /**
     * Returns the repository build configuration status of the app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.includeInactive] Include inactive configurations
     * if none are active
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(ownerName: string, appName: string, options: { includeInactive? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Configures the repository for build
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} repoUrl The repository url
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(ownerName: string, appName: string, repoUrl: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    update(ownerName: string, appName: string, repoUrl: string, callback: ServiceCallback<any>): void;

    /**
     * Removes the configuration for the respository
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    remove(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    remove(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Provisioning
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Provisioning {

    /**
     * Return information about the provisioning profile
     *
     * @param {number} releaseId The release_id
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    profile(releaseId: number, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProvisioningProfile>): void;
    profile(releaseId: number, ownerName: string, appName: string, callback: ServiceCallback<models.ProvisioningProfile>): void;
}

/**
 * @class
 * ReleaseUploads
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface ReleaseUploads {

    /**
     * Commits or aborts the upload process for a release for the specified
     * application
     *
     * @param {string} uploadId The ID of the upload
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} status The desired operation for the upload. Possible
     * values include: 'committed', 'aborted'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    complete(uploadId: string, ownerName: string, appName: string, status: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReleaseUploadEndResponse>): void;
    complete(uploadId: string, ownerName: string, appName: string, status: string, callback: ServiceCallback<models.ReleaseUploadEndResponse>): void;

    /**
     * Begins the upload process for a new release for the specified application.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReleaseUploadBeginResponse>): void;
    create(ownerName: string, appName: string, callback: ServiceCallback<models.ReleaseUploadBeginResponse>): void;
}

/**
 * @class
 * StoreReleases
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface StoreReleases {

    /**
     * Return releases published in a store for releaseId and storeId
     *
     * @param {string} storeName The name of the store
     * 
     * @param {string} releaseId The name of the store
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(storeName: string, releaseId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    get(storeName: string, releaseId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * delete the release with release Id
     *
     * @param {string} storeName The name of the store
     * 
     * @param {string} releaseId The id of the release
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(storeName: string, releaseId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorDetails>): void;
    deleteMethod(storeName: string, releaseId: string, ownerName: string, appName: string, callback: ServiceCallback<models.ErrorDetails>): void;

    /**
     * Return all releases published  in a store
     *
     * @param {string} storeName The name of the store
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(storeName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(storeName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns the latest release published in a store.
     *
     * @param {string} storeName The name of the store
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getLatest(storeName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getLatest(storeName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Stores
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Stores {

    /**
     * Return the store details for specified store name.
     *
     * @param {string} storeName The id of the store
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(storeName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    get(storeName: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * delete the store based on specific store name.
     *
     * @param {string} storeName The name of the store
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(storeName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorDetails>): void;
    deleteMethod(storeName: string, ownerName: string, appName: string, callback: ServiceCallback<models.ErrorDetails>): void;

    /**
     * Create a new external store for the specified application.
     *
     * @param {object} body The store request
     * 
     * @param {string} [body.type] store Type. Possible values include:
     * 'googleplay', 'intune'
     * 
     * @param {string} [body.name] name of the store. In case of googleplay this
     * is fixed to GooglePlay-Production.
     * 
     * @param {object} [body.intuneDetails]
     * 
     * @param {object} [body.intuneDetails.secretJson]
     * 
     * @param {string} [body.intuneDetails.secretJson.idToken] the id token of user
     * 
     * @param {string} [body.intuneDetails.secretJson.refreshToken] the refresh
     * token for user
     * 
     * @param {string} [body.intuneDetails.secretJson.refreshTokenExpiry] the
     * expiry of refresh token
     * 
     * @param {string} [body.intuneDetails.targetAudience] target audience in
     * intune store
     * 
     * @param {string} [body.intuneDetails.appCategory] app category in intune
     * store
     * 
     * @param {string} [body.intuneDetails.tenantId] tenant id of the intune store
     * 
     * @param {object} [body.googleplayDetails]
     * 
     * @param {object} [body.googleplayDetails.secretJson] Provide service account
     * details JSON (this is provided by google).
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(body: models.ExternalStoreRequest, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    create(body: models.ExternalStoreRequest, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Get all the store details from Storage store table for a particular
     * application.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExternalStoreResponse[]>): void;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.ExternalStoreResponse[]>): void;
}

/**
 * @class
 * DistributionGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface DistributionGroups {

    /**
     * Remove the users from the distribution group
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} distributionGroupName The name of the distribution group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {array} [options.userEmails] The list of emails of the users
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    removeUser(ownerName: string, appName: string, distributionGroupName: string, options: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    removeUser(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns a list of member details in the distribution group specified
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} distributionGroupName The name of the distribution group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.excludePendingInvitations] Whether to exclude
     * pending invitations in the response
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listUsers(ownerName: string, appName: string, distributionGroupName: string, options: { excludePendingInvitations? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listUsers(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<any>): void;

    /**
     * Adds the members to the specified distribution group
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} distributionGroupName The name of the distribution group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {array} [options.userEmails] The list of emails of the users
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    addUser(ownerName: string, appName: string, distributionGroupName: string, options: { userEmails? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    addUser(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns a single distribution group for a given distribution group name
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} distributionGroupName The name of the distribution group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(ownerName: string, appName: string, distributionGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    get(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<any>): void;

    /**
     * Updates the attributes of distribution group
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} distributionGroupName The name of the distribution group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.name] The name of the distribution group
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(ownerName: string, appName: string, distributionGroupName: string, options: { name? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    update(ownerName: string, appName: string, distributionGroupName: string, callback: ServiceCallback<any>): void;

    /**
     * Deletes a distribution group
     *
     * @param {string} appName The name of the application
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} distributionGroupName The name of the distribution group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(appName: string, ownerName: string, distributionGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteMethod(appName: string, ownerName: string, distributionGroupName: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Returns a list of distribution groups in the app specified
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Creates a new distribution group and returns it to the caller
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} name The name of the distribution group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(ownerName: string, appName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    create(ownerName: string, appName: string, name: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * DeploymentReleases
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface DeploymentReleases {

    /**
     * Modifies a CodePush release metadata under the given Deployment
     *
     * @param {string} deploymentName deployment name
     * 
     * @param {string} releaseLabel release label
     * 
     * @param {object} release Release modification. All fields are optional and
     * only provided fields will get updated.
     * 
     * @param {string} [release.targetBinaryRange]
     * 
     * @param {string} [release.description]
     * 
     * @param {boolean} [release.isDisabled]
     * 
     * @param {boolean} [release.isMandatory]
     * 
     * @param {number} [release.rollout]
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(deploymentName: string, releaseLabel: string, release: models.LiveUpdateReleaseModification, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LiveUpdateRelease>): void;
    update(deploymentName: string, releaseLabel: string, release: models.LiveUpdateReleaseModification, ownerName: string, appName: string, callback: ServiceCallback<models.LiveUpdateRelease>): void;

    /**
     * Gets the history of releases on a Deployment
     *
     * @param {string} deploymentName deployment name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(deploymentName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LiveUpdateRelease[]>): void;
    get(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<models.LiveUpdateRelease[]>): void;
}

/**
 * @class
 * DeploymentMetrics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface DeploymentMetrics {

    /**
     * Gets all releases metrics for specified Deployment
     *
     * @param {string} deploymentName deployment name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(deploymentName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LiveUpdateReleaseMetric[]>): void;
    get(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<models.LiveUpdateReleaseMetric[]>): void;
}

/**
 * @class
 * Deployments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Deployments {

    /**
     * Gets a CodePush Deployment (e.g. 'Staging') for the given app
     *
     * @param {string} deploymentName deployment name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(deploymentName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;
    get(deploymentName: string, ownerName: string, appName: string, callback: ServiceCallback<models.Deployment>): void;

    /**
     * Modifies a CodePush Deployment (e.g. 'Staging') for the given app
     *
     * @param {string} deploymentName deployment name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(deploymentName: string, ownerName: string, appName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    update(deploymentName: string, ownerName: string, appName: string, name: string, callback: ServiceCallback<void>): void;

    /**
     * Gets a list of CodePush deployments (e.g. 'Staging', 'Production') for the
     * given app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment[]>): void;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.Deployment[]>): void;

    /**
     * Creates a CodePush Deployment (e.g. 'Staging') for the given app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.key]
     * 
     * @param {object} [options.latestRelease]
     * 
     * @param {string} [options.latestRelease.targetBinaryRange]
     * 
     * @param {string} [options.latestRelease.blobUrl]
     * 
     * @param {string} [options.latestRelease.description]
     * 
     * @param {boolean} [options.latestRelease.isDisabled]
     * 
     * @param {boolean} [options.latestRelease.isMandatory]
     * 
     * @param {string} [options.latestRelease.label]
     * 
     * @param {string} [options.latestRelease.originalDeployment] Set on 'Promote'
     * 
     * @param {string} [options.latestRelease.originalLabel] Set on 'Promote' and
     * 'Rollback'
     * 
     * @param {string} [options.latestRelease.hash]
     * 
     * @param {string} [options.latestRelease.releasedBy]
     * 
     * @param {string} [options.latestRelease.releaseMethod] The release method is
     * unknown if unspecified. Possible values include: 'Upload', 'Promote',
     * 'Rollback'
     * 
     * @param {number} [options.latestRelease.rollout]
     * 
     * @param {number} [options.latestRelease.size]
     * 
     * @param {number} [options.latestRelease.uploadTime]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(ownerName: string, appName: string, name: string, options: { key? : string, latestRelease? : models.LiveUpdateRelease, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;
    create(ownerName: string, appName: string, name: string, callback: ServiceCallback<models.Deployment>): void;
}

/**
 * @class
 * CrashGroupsOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface CrashGroupsOperations {

    /**
     * Gets a stacktrace for a specific crash
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.groupingOnly] true if the stacktrace should be
     * only the relevant thread / exception. Default is false
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getStacktrace(crashGroupId: string, ownerName: string, appName: string, options: { groupingOnly? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Stacktrace>): void;
    getStacktrace(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Stacktrace>): void;

    /**
     * Gets a specific group
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(crashGroupId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroup>): void;
    get(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroup>): void;

    /**
     * Updates a group
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.status]
     * 
     * @param {string} [options.annotation]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(crashGroupId: string, ownerName: string, appName: string, options: { status? : any, annotation? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroup>): void;
    update(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroup>): void;

    /**
     * @summary Gets a list of crashes
     *
     * Gets a list of crashes
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.lastOccurrenceFrom] Earliest date when the last time
     * a crash occured in a crash group
     * 
     * @param {date} [options.lastOccurrenceTo] Latest date when the last time a
     * crash occured in a crash group
     * 
     * @param {string} [options.appVersion] version
     * 
     * @param {string} [options.groupType] Possible values include: 'GroupType1',
     * 'GroupType2'
     * 
     * @param {string} [options.groupStatus] Possible values include: 'open',
     * 'closed', 'ignored'
     * 
     * @param {string} [options.groupTextSearch] A freetext search that matches in
     * crash, crash types, crash stack_traces and crash user
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(ownerName: string, appName: string, options: { lastOccurrenceFrom? : Date, lastOccurrenceTo? : Date, appVersion? : string, groupType? : string, groupStatus? : string, groupTextSearch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroup[]>): void;
    list(ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroup[]>): void;

    /**
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCounts(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroupCounts>): void;
    getCounts(ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroupCounts>): void;
}

/**
 * @class
 * Commits
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Commits {

    /**
     * Returns commit information for a batch of shas. (Deprecated. Use
     * /apps/{app_id}/commits/batch instead with query string hashes)
     *
     * @param {string} shaCollection A collection of commit SHAs comma-delimited
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.form] The selected form of the object. Possible
     * values include: 'lite', 'full'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deprecatedListBySha(shaCollection: string, ownerName: string, appName: string, options: { form? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CommitDetails[]>): void;
    deprecatedListBySha(shaCollection: string, ownerName: string, appName: string, callback: ServiceCallback<models.CommitDetails[]>): void;

    /**
     * Returns commit information for a batch of shas
     *
     * @param {array} hashes A collection of commit SHAs comma-delimited
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByShaList(hashes: string[], ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CommitDetails[]>): void;
    listByShaList(hashes: string[], ownerName: string, appName: string, callback: ServiceCallback<models.CommitDetails[]>): void;
}

/**
 * @class
 * BranchConfigurations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface BranchConfigurations {

    /**
     * Gets the branch configuration
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    get(branch: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Configures the branch for build
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BranchConfiguration>): void;
    create(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.BranchConfiguration>): void;

    /**
     * Reconfigures the branch for build
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BranchConfiguration>): void;
    update(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.BranchConfiguration>): void;

    /**
     * Deletes the branch build configuration
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SuccessResponse>): void;
    deleteMethod(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.SuccessResponse>): void;
}

/**
 * @class
 * Analytics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface Analytics {

    /**
     * Count of active versions in the time range ordered by version.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    versions(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Versions>): void;
    versions(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.Versions>): void;

    /**
     * Count of sessions per device in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} interval Size of interval in ISO 8601 duration format.
     * (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D),
     * 1 week (P1W), and 30 days (P30D).
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    perDeviceCounts(start: Date|string, interval: string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionsPerDevice>): void;
    perDeviceCounts(start: Date|string, interval: string, ownerName: string, appName: string, callback: ServiceCallback<models.SessionsPerDevice>): void;

    /**
     * Gets session duration .
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    sessionDurationsDistribution(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionDurationsDistribution>): void;
    sessionDurationsDistribution(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.SessionDurationsDistribution>): void;

    /**
     * Count of sessions in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} interval Size of interval in ISO 8601 duration format.
     * (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D),
     * 1 week (P1W), and 30 days (P30D).
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    sessionCounts(start: Date|string, interval: string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DateTimeCounts[]>): void;
    sessionCounts(start: Date|string, interval: string, ownerName: string, appName: string, callback: ServiceCallback<models.DateTimeCounts[]>): void;

    /**
     * Places in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    placeCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Places>): void;
    placeCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.Places>): void;

    /**
     * OSes in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    operatingSystemCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OSes>): void;
    operatingSystemCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.OSes>): void;

    /**
     * models in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    modelCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AnalyticsModels>): void;
    modelCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.AnalyticsModels>): void;

    /**
     * Logs received between the specified start time and the current time. The
     * API will return a maximum of 100 logs per call.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.start] Start date time in data in ISO 8601 date time
     * format. It must be within the current day in the UTC timezone. The default
     * value is the start time of the current day in UTC timezone.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    logFlow(ownerName: string, appName: string, options: { start? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LogContainer>): void;
    logFlow(ownerName: string, appName: string, callback: ServiceCallback<models.LogContainer>): void;

    /**
     * languages in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    languageCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Languages>): void;
    languageCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.Languages>): void;

    /**
     * Logs received between the specified start time and the current time. The
     * API will return a maximum of 100 logs per call.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.start] Start date time in data in ISO 8601 date time
     * format. It must be within the current day in the UTC timezone. The default
     * value is the start time of the current day in UTC timezone.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    genericLogFlow(ownerName: string, appName: string, options: { start? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericLogContainer>): void;
    genericLogFlow(ownerName: string, appName: string, callback: ServiceCallback<models.GenericLogContainer>): void;

    /**
     * Event properties value counts during the time range in descending order.
     * Limited up to 5 values.
     *
     * @param {string} eventName The id of the event
     * 
     * @param {string} eventPropertyName The id of the event property
     * 
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {number} [options.count] The number of property values to return
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventPropertyCounts(eventName: string, eventPropertyName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], count? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventPropertyValues>): void;
    eventPropertyCounts(eventName: string, eventPropertyName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventPropertyValues>): void;

    /**
     * Event properties.  Up to the first 5 received properties.
     *
     * @param {string} eventName The id of the event
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventProperties(eventName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventProperties>): void;
    eventProperties(eventName: string, ownerName: string, appName: string, callback: ServiceCallback<models.EventProperties>): void;

    /**
     * Count of events by interval in the time range.
     *
     * @param {string} eventName The id of the event
     * 
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventCount(eventName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventCount>): void;
    eventCount(eventName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventCount>): void;

    /**
     * Count of devices for an event by interval in the time range.
     *
     * @param {string} eventName The id of the event
     * 
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventDeviceCount(eventName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventDeviceCount>): void;
    eventDeviceCount(eventName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventDeviceCount>): void;

    /**
     * Count of events per session by interval in the time range.
     *
     * @param {string} eventName The id of the event
     * 
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventPerSessionCount(eventName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventCountPerSession>): void;
    eventPerSessionCount(eventName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventCountPerSession>): void;

    /**
     * Count of events per device by interval in the time range.
     *
     * @param {string} eventName The id of the event
     * 
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventPerDeviceCount(eventName: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventCountPerDevice>): void;
    eventPerDeviceCount(eventName: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.EventCountPerDevice>): void;

    /**
     * Delete the set of Events with the specified event names
     *
     * @param {string} eventName The id of the event
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventsDelete(eventName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    eventsDelete(eventName: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Count of active events in the time range ordered by event.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {array} [options.eventName] to select the specific events
     * 
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     * 
     * @param {number} [options.skip] The offset (starting at 0) of the first
     * result to return. This parameter along with limit is used to perform
     * pagination.
     * 
     * @param {string} [options.inlinecount] Controls whether or not to include a
     * count of all the items accross all pages. Possible values include:
     * 'allpages', 'none'
     * 
     * @param {string} [options.orderby] controls the sorting order and sorting
     * based on which column
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    events(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], eventName? : string[], top? : number, skip? : number, inlinecount? : string, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Events>): void;
    events(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.Events>): void;

    /**
     * Delete the set of Events with the specified event names
     *
     * @param {string} eventName The id of the event
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    eventsDeleteLogs(eventName: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    eventsDeleteLogs(eventName: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Percentage of crash-free device by day in the time range based on the
     * selected versions. Api will return -1 if crash devices is greater than
     * active devices
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashFreeDevicePercentages(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashFreeDevicePercentages>): void;
    crashFreeDevicePercentages(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashFreeDevicePercentages>): void;

    /**
     * Overall crashes and affected users count of the selected crash group with
     * selected version
     *
     * @param {string} crashGroupId The id of the crash group
     * 
     * @param {string} version
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupTotals(crashGroupId: string, version: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashOverall>): void;
    crashGroupTotals(crashGroupId: string, version: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashOverall>): void;

    /**
     * top OSes of the selected crash group with selected version
     *
     * @param {string} crashGroupId The id of the crash group
     * 
     * @param {string} version
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupOperatingSystemCounts(crashGroupId: string, version: string, ownerName: string, appName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroupOperatingSystems>): void;
    crashGroupOperatingSystemCounts(crashGroupId: string, version: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroupOperatingSystems>): void;

    /**
     * top models of the selected crash group with selected version
     *
     * @param {string} crashGroupId The id of the crash group
     * 
     * @param {string} version
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.top] The maximum number of results to return. (0
     * will fetch all results)
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupModelCounts(crashGroupId: string, version: string, ownerName: string, appName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroupModels>): void;
    crashGroupModelCounts(crashGroupId: string, version: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroupModels>): void;

    /**
     * Count of crashes by day in the time range of the selected crash group with
     * selected version
     *
     * @param {string} crashGroupId The id of the crash group
     * 
     * @param {string} version
     * 
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupCounts(crashGroupId: string, version: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashCounts>): void;
    crashGroupCounts(crashGroupId: string, version: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashCounts>): void;

    /**
     * Overall crashes and affected users count of the selected crash groups with
     * selected versions
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {array} crashGroups
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupsTotals(ownerName: string, appName: string, crashGroups: models.CrashGroupAndVersion[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashesOverallItem[]>): void;
    crashGroupsTotals(ownerName: string, appName: string, crashGroups: models.CrashGroupAndVersion[], callback: ServiceCallback<models.CrashesOverallItem[]>): void;

    /**
     * Count of crashes by day in the time range based the selected versions.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashCounts>): void;
    crashCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashCounts>): void;

    /**
     * Count of active devices by interval in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deviceCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ActiveDeviceCounts>): void;
    deviceCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.ActiveDeviceCounts>): void;
}

/**
 * @class
 * ApiTokens
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileCenterClient.
 */
export interface ApiTokens {

    /**
     * Delete the api_token object with the specific id
     *
     * @param {string} apiTokenId The unique ID (UUID) of the api token
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(apiTokenId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteMethod(apiTokenId: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Returns api tokens for the authenticated user
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(callback: ServiceCallback<any>): void;

    /**
     * Creates a new API token
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.description] The description of the token
     * 
     * @param {array} [options.scope] The scope for this token.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    newMethod(options: { description? : string, scope? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    newMethod(callback: ServiceCallback<any>): void;
}
